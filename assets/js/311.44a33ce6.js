(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{606:function(e,t,n){"use strict";n.r(t);var o=n(14),r=Object(o.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"titanium-network-socket-tcp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#titanium-network-socket-tcp","aria-hidden":"true"}},[e._v("#")]),e._v(" Titanium.Network.Socket.TCP")]),e._v(" "),n("ProxySummary"),e._v(" "),n("h2",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),n("p",[e._v("Most socket operations are asynchronous. When you create a socket, you can define\ncallback functions to receive the results of API calls, as well as to handle incoming\ndata.")]),e._v(" "),n("p",[e._v("For example, for a client-side socket, you define\n"),n("type-link",{attrs:{type:"Titanium.Network.Socket.TCP.connected"}},[e._v("connected")]),e._v(" and\n"),n("type-link",{attrs:{type:"Titanium.Network.Socket.TCP.error"}},[e._v("error")]),e._v(" callback functions.")],1),e._v(" "),n("p",[e._v("To connect to a remote host, call the socket's\n"),n("type-link",{attrs:{type:"Titanium.Network.Socket.TCP.connect"}},[e._v("connect")]),e._v(" method. If the socket connects\nsuccessfully, your "),n("code",[e._v("connected")]),e._v(" callback is invoked, and you can send and receive data\non the socket. If the socket connection fails, your "),n("code",[e._v("error")]),e._v(" callback is invoked.")],1),e._v(" "),n("p",[e._v("After a socket is connected, you can access it like any other "),n("type-link",{attrs:{type:"Titanium.IOStream"}},[e._v("Titanium.IOStream")]),e._v(".\nNote that the socket's "),n("code",[e._v("read")]),e._v(" and "),n("code",[e._v("write")]),e._v(" methods may block, so in most cases\nyou should use the asynchronous "),n("type-link",{attrs:{type:"Titanium.Stream.read"}},[e._v("read")]),e._v(", "),n("type-link",{attrs:{type:"Titanium.Stream.write"}},[e._v("write")]),e._v("\nand "),n("type-link",{attrs:{type:"Titanium.Stream.pump"}},[e._v("pump")]),e._v(" methods provided by the "),n("type-link",{attrs:{type:"Titanium.Stream"}},[e._v("Titanium.Stream")]),e._v(" module,\nrather than using the socket object's "),n("code",[e._v("read")]),e._v(" and "),n("code",[e._v("write")]),e._v(" methods directly.")],1),e._v(" "),n("p",[e._v("A familiarity with the basics of BSD socket programming is recommended before using\nsockets with Titanium.")]),e._v(" "),n("p",[e._v("Use the "),n("type-link",{attrs:{type:"Titanium.Network.Socket.createTCP"}},[e._v("Titanium.Network.Socket.createTCP")]),e._v(" method to create a TCP socket.")],1),e._v(" "),n("h2",{attrs:{id:"examples"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),n("h3",{attrs:{id:"simple-socket-io-using-stream-pump"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simple-socket-io-using-stream-pump","aria-hidden":"true"}},[e._v("#")]),e._v(" Simple Socket IO using Stream.pump")]),e._v(" "),n("p",[e._v("The following example uses the "),n("type-link",{attrs:{type:"Titanium.Stream.pump"}},[e._v("pump")]),e._v(" method from the "),n("type-link",{attrs:{type:"Titanium.Stream"}},[e._v("Titanium.Stream")]),e._v("\nmodule to read data from a socket. The "),n("code",[e._v("pump")]),e._v(" method registers a callback that is\ncalled repeatedly to process incoming data from the socket.")],1),e._v(" "),n("pre",[n("code",[e._v("var socket = Ti.Network.Socket.createTCP({\n    host: 'blog.example.com', port: 80,\n    connected: function (e) {\n        Ti.API.info('Socket opened!');\n        Ti.Stream.pump(e.socket, readCallback, 1024, true);\n        Ti.Stream.write(socket, Ti.createBuffer({\n            value: 'GET http://blog.example.com/index.html HTTP/1.1\\r\\n\\r\\n'\n        }), writeCallback);\n    },\n        error: function (e) {\n        Ti.API.info('Error (' + e.errorCode + '): ' + e.error);\n    },\n});\nsocket.connect();\n\nfunction writeCallback(e) {\n    Ti.API.info('Successfully wrote to socket.');\n}\n\nfunction readCallback(e) {\n    if (e.bytesProcessed == -1)\n    {\n        // Error / EOF on socket. Do any cleanup here.\n        ...\n    }\n    try {\n        if(e.buffer) {\n            var received = e.buffer.toString();\n            Ti.API.info('Received: ' + received);\n        } else {\n            Ti.API.error('Error: read callback called with no buffer!');\n        }\n    } catch (ex) {\n        Ti.API.error(ex);\n    }\n}\n")])]),e._v(" "),n("h3",{attrs:{id:"listening-socket-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#listening-socket-example","aria-hidden":"true"}},[e._v("#")]),e._v(" Listening Socket Example")]),e._v(" "),n("p",[e._v("The following sample shows a trivial example of using a listening\nsocket. In this case, the application simply sends messages to itself,\nusing the loopback address.")]),e._v(" "),n("pre",[n("code",[e._v('// Hostname to listen on/connect to. Here we use the loopback\n// address. iOS also supports Ti.Platform.address (the address of\n// the WiFi interface).\n// Android supports only the loopback address.\n\nvar hostname = \'127.0.0.1\';\n\nvar clientSocket = Ti.Network.Socket.createTCP({\n    host : hostname,\n    port : 40404,\n    connected : function(e) {\n        Ti.API.info(\'Client socket connected!\');\n        Ti.Stream.pump(e.socket, pumpCallback, 1024, true);\n        e.socket.write(Ti.createBuffer({\n            value : \'A message from a connecting socket.\'\n        }));\n    },\n    error : function(e) {\n        Ti.API.info(\'Error (\' + e.errorCode + \'): \' + e.error);\n    }\n});\n\nfunction writeCallback(e) {\n    Ti.API.info(\'Successfully wrote to socket.\');\n}\n\nfunction pumpCallback(e) {\n    // Has the remote socket closed its end?\n    if (e.bytesProcessed < 0) {\n        Ti.API.info("Closing client socket.");\n        clientSocket.close();\n        return;\n    }\n    try {\n        if(e.buffer) {\n            var received = e.buffer.toString();\n            Ti.API.info(\'Received: \' + received);\n        } else {\n            Ti.API.error(\'Error: read callback called with no buffer!\');\n        }\n    } catch (ex) {\n        Ti.API.error(ex);\n    }\n}\n\n//Create a socket and listen for incoming connections\nvar listenSocket = Ti.Network.Socket.createTCP({\n    host : hostname,\n    port : 40404,\n    accepted : function(e) {\n        // This where you would usually store the newly-connected socket, e.inbound\n        // so it can be used for read / write operations elsewhere in the app.\n        // In this case, we simply send a message then close the socket.\n        Ti.API.info("Listening socket <" + e.socket + "> accepted incoming connection <" + e.inbound + ">");\n        e.inbound.write(Ti.createBuffer({\n            value : \'You have been connected to a listening socket.\\r\\n\'\n        }));\n        e.inbound.close();\n        // close the accepted socket\n\n    },\n    error : function(e) {\n        Ti.API.error("Socket <" + e.socket + "> encountered error when listening");\n        Ti.API.error(" error code <" + e.errorCode + ">");\n        Ti.API.error(" error description <" + e.error + ">");\n    }\n});\n// Starts the socket listening for connections, does not accept them\nlistenSocket.listen();\nTi.API.info("Listening now...");\n\n// Tells socket to accept the next inbound connection. listenSocket.accepted gets\n// called when a connection is accepted via accept()\nTi.API.info("Calling accept.");\nlistenSocket.accept({\n    timeout : 10000\n});\n\n// Call connect after a short timeout to ensure the listening socket is ready to go.\nTi.API.info("Setting timer to connect.");\nsetTimeout(function(e)\n{\n    Ti.API.info("Calling connect on client socket.");\n   clientSocket.connect();\n}, 500);\n')])]),e._v(" "),n("ApiDocs")],1)},[],!1,null,null,null);r.options.__file="tcp.md";t.default=r.exports}}]);