(window.webpackJsonp=window.webpackJsonp||[]).push([[319],{468:function(e,t,a){"use strict";a.r(t);var n=a(14),o=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"titanium-ui"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titanium-ui","aria-hidden":"true"}},[e._v("#")]),e._v(" Titanium.UI")]),e._v(" "),a("ProxySummary"),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("The UI module is responsible for native user-interface components and interaction inside\nTitanium.  The goal of the UI module is to provide a native experience along with native\nperformance by compiling Javascript code into their native counterparts as part of the\nbuild process.")]),e._v(" "),a("h3",{attrs:{id:"design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#design","aria-hidden":"true"}},[e._v("#")]),e._v(" Design")]),e._v(" "),a("p",[e._v("The UI module is broken down into 3 major area:")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Views")]),e._v(" - "),a("type-link",{attrs:{type:"Titanium.UI.View"}},[e._v("Views")]),e._v(" are containers that host visual elements such as\ncontrols or other views.  Views can have their properties customized, such as their border color\nand radius, can fire events such as swipe events or touches, and can optionally contain a\nhierarchy or other views as children. In Titanium, most views are specialized to perform both a\nvisual function and set of interaction behaviors such as "),a("type-link",{attrs:{type:"Titanium.UI.TableView"}},[e._v("Table View")]),e._v(" or\n"),a("type-link",{attrs:{type:"Titanium.UI.iOS.CoverFlowView"}},[e._v("Coverflow View")]),e._v(".  Views are always named with the suffix "),a("code",[e._v("View")]),e._v(".")],1)]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Controls")]),e._v(" - controls, or sometimes referred as widgets, are visual elements such as\n"),a("type-link",{attrs:{type:"Titanium.UI.Slider"}},[e._v("sliders")]),e._v(",  "),a("type-link",{attrs:{type:"Titanium.UI.Button"}},[e._v("buttons")]),e._v(" and "),a("type-link",{attrs:{type:"Titanium.UI.Switch"}},[e._v("switches")]),e._v(".\nThey provide a visual element which has a defined behavior and typical have special\nconfiguration and special events.  Controls themselves are views and also inherit a views\nproperties, functions and events.")],1)]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Windows")]),e._v(" - "),a("type-link",{attrs:{type:"Titanium.UI.Window"}},[e._v("Windows")]),e._v(" are typically top-level visual constructs that are\nthe main part of your interface. An application will always have at least one window and windows\ncan take different shapes and sizes, can have display and interaction properties such as\nfullscreen or modal and can be customized, such as changing their opacity or background color.\nWindows themselves are views and also inherit a views properties, functions and events. There\nare a few specialization of Windows such as a "),a("type-link",{attrs:{type:"Titanium.UI.TabGroup"}},[e._v("Tab Group")]),e._v(" which offer\nadditional behavior beyond the basic Window.")],1)])]),e._v(" "),a("p",[e._v("Titanium uses the "),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Factory_method_pattern",target:"_blank",rel:"noopener noreferrer"}},[e._v("Factory Pattern"),a("OutboundLink")],1),e._v(" for\nconstructing objects and a general naming pattern for APIs.  For example, to construct a\n"),a("type-link",{attrs:{type:"Titanium.UI.AlertDialog"}},[e._v("Alert Dialog")]),e._v(", you call the method "),a("type-link",{attrs:{type:"Titanium.UI.createAlertDialog"}},[e._v("Titanium.UI.createAlertDialog")]),e._v(".\nTo create a "),a("type-link",{attrs:{type:"Titanium.UI.TextArea"}},[e._v("TextArea")]),e._v(", you call the method "),a("type-link",{attrs:{type:"Titanium.UI.createTextArea"}},[e._v("Titanium.UI.createTextArea")]),e._v(".\nOnce an object is created, it will be available until it goes out of scope.")],1),e._v(" "),a("h3",{attrs:{id:"optimizations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimizations","aria-hidden":"true"}},[e._v("#")]),e._v(" Optimizations")]),e._v(" "),a("p",[e._v("UI objects are optimized by Titanium to not be realized into the drawing context and placed into\nthe device UI surface until needed.  That means that you can create UI objects, set their\nproperties and add them to their hierarchy without much worry about memory or performance.\nWhen the native drawing surface needs to render a specific view or control, Titanium will\nautomatically create the view as needed.  Additionally, Titanium is optimized to also release\nmemory once the view is no longer needed, on screen or in low memory situations.  However, it's\na good idea to help Titanium along in certain cases where you are no longer using objects.  For\nexample, you should call "),a("code",[e._v("close")]),e._v(" on a "),a("type-link",{attrs:{type:"Titanium.UI.Window"}},[e._v("Window")]),e._v(" instance when you are no\nlonger using it.  You can safely call "),a("code",[e._v("open")]),e._v(" on the window again to re-open it.")],1),e._v(" "),a("h3",{attrs:{id:"global-context-and-threading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global-context-and-threading","aria-hidden":"true"}},[e._v("#")]),e._v(" Global Context and Threading")]),e._v(" "),a("p",[e._v("Be careful with the objects that are created in "),a("code",[e._v("app.js")]),e._v(" but only used once. Since the "),a("code",[e._v("app.js")]),e._v("\ncontext is global and generally is not garbage collected until the application exits, you\nshould think about the design of your application as it relates to this fact.")]),e._v(" "),a("p",[a("type-link",{attrs:{type:"Titanium.UI.Window"}},[e._v("Window")]),e._v(" objects that are opened up with the "),a("code",[e._v("url")]),e._v(" property to another\nJavaScript file provide a nice way to decompose your application into smaller units.")],1),e._v(" "),a("p",[e._v("Additionally, Window objects created with a "),a("code",[e._v("url")]),e._v(" value run in a separate JavaScript context\nand thread. While all UI processing is done on the main UI thread, other processing inside\na Window or the "),a("code",[e._v("app.js")]),e._v(" that does not have UI interaction will run in its own thread.")]),e._v(" "),a("p",[e._v("The other benefit of using the "),a("code",[e._v("url")]),e._v(" property is that when the window is closed, resources\nallocated in the window's context can be immediately cleaned up, saving resources such as\nmemory and CPU.")]),e._v(" "),a("p",[e._v('For more information, see the sections "Sub-contexts" and "Passing Data Between Contexts" on the\n'),a("type-link",{attrs:{type:"Titanium.UI.Window"}},[e._v("Window")]),e._v(" reference page.")],1),e._v(" "),a("h3",{attrs:{id:"portability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#portability","aria-hidden":"true"}},[e._v("#")]),e._v(" Portability")]),e._v(" "),a("p",[e._v("Titanium components are designed to be portable across as many platforms as it supports.\nHowever, there are cases where a device either does not support a specific feature or capability\nor where it support additional functionality.  For cases where the device OS supports\ncapabilities that other platforms do not, we attempt to place those capabilities in a separate\nnamespace, such as "),a("type-link",{attrs:{type:"Titanium.UI.iPhone"}},[e._v("Titanium.UI.iPhone")]),e._v(". However, in cases where the control is in a common\nnamespace and support additional features, we continue to place that functionality directly on\nthe object.")],1),e._v(" "),a("h3",{attrs:{id:"events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#events","aria-hidden":"true"}},[e._v("#")]),e._v(" Events")]),e._v(" "),a("p",[e._v("Event listeners must be defined before their respective events are likely to be fired, otherwise\nthey are not guaranteed to be called. The open and focus "),a("type-link",{attrs:{type:"Titanium.UI.Window"}},[e._v("Window")]),e._v(" event\nlisteners, for instance, must be defined before the window is opened.")],1),e._v(" "),a("p",[e._v("Evaluating events as late as possible while bearing the above consideration in mind, however,\ncan significantly improve application responsiveness. For example, an event listener for a\nclick event may be defined after the parent window has been opened.")]),e._v(" "),a("h3",{attrs:{id:"colors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#colors","aria-hidden":"true"}},[e._v("#")]),e._v(" Colors")]),e._v(" "),a("p",[e._v("Many UI components have properties that control their color.")]),e._v(" "),a("p",[e._v("Colors may be specified as a hex triplet to determine the red, green and blue channels. Thus,\n"),a("code",[e._v("'#000000'")]),e._v(" is specified for black, "),a("code",[e._v("'#ff0000'")]),e._v(" for red, "),a("code",[e._v("'#00ff00'")]),e._v(" for green, "),a("code",[e._v("'#0000ff'")]),e._v(" for\nblue, and "),a("code",[e._v("'#ffffff'")]),e._v(" for white, etc. A channel may be abbreviated when its two hex digits are\nidentical, such as "),a("code",[e._v("'#000'")]),e._v(", "),a("code",[e._v("'#f00'")]),e._v(", "),a("code",[e._v("'#0f0#'")]),e._v(", "),a("code",[e._v("'#00f'")]),e._v(" and "),a("code",[e._v("'#fff'")]),e._v(" for the above colors,\nrespectively.")]),e._v(" "),a("p",[e._v("An additional alpha channel is supported as a prefix to the hex triplet. So, to make\nthe purple-like color "),a("code",[e._v("'#ff00ff'")]),e._v(" semi-opaque, you could use an alpha value of "),a("code",[e._v("'55'")]),e._v(", giving,\n"),a("code",[e._v("'#55ff00ff'")]),e._v(" or "),a("code",[e._v("'#5f0f'")]),e._v(".")]),e._v(" "),a("p",[e._v("Note that while the pound symbol, "),a("code",[e._v("#")]),e._v(", is not mandatory on iOS when using the hex triplet format,\nit is recommended to include it to provide compatibility with other platforms.")]),e._v(" "),a("p",[e._v("iOS also accepts colors specified in the form, "),a("code",[e._v("rgb(R,G,B)")]),e._v(" and "),a("code",[e._v("rgba(R,G,B,A)")]),e._v(", with the color\nchannels inside the parethesis represented by integer numbers between "),a("code",[e._v("0")]),e._v(" and "),a("code",[e._v("255")]),e._v(" and the\nalpha channel by a float number between "),a("code",[e._v("0")]),e._v(" and "),a("code",[e._v("1.0")]),e._v(" (transparent to opaque, respectively).\nFor example, an opaque purple could be obtained using "),a("code",[e._v("'rgb(255,0,255)'")]),e._v(" and a semi-opaque purple\nusing "),a("code",[e._v("'rgba(255,0,255,0.3)'")]),e._v(". Note that although this format will work if the "),a("code",[e._v("rgb")]),e._v(" or "),a("code",[e._v("rgba")]),e._v("\nprefix is omitted, this is not officially supported and thus not recommended.")]),e._v(" "),a("p",[e._v("Alternatively, the following set of color names are recognized.")]),e._v(" "),a("p",[a("code",[e._v("'aqua'")]),e._v(", "),a("code",[e._v("'black'")]),e._v(", "),a("code",[e._v("'blue'")]),e._v(", "),a("code",[e._v("'brown'")]),e._v(", "),a("code",[e._v("'cyan'")]),e._v(", "),a("code",[e._v("'darkgray'")]),e._v(", "),a("code",[e._v("'fuchsia'")]),e._v(", "),a("code",[e._v("'gray'")]),e._v(",\n"),a("code",[e._v("'green'")]),e._v(", "),a("code",[e._v("'lightgray'")]),e._v(", "),a("code",[e._v("'lime'")]),e._v(", "),a("code",[e._v("'magenta'")]),e._v(", "),a("code",[e._v("'maroon'")]),e._v(", "),a("code",[e._v("'navy'")]),e._v(", "),a("code",[e._v("'olive'")]),e._v(", "),a("code",[e._v("'orange'")]),e._v(",\n"),a("code",[e._v("'pink'")]),e._v(", "),a("code",[e._v("'purple'")]),e._v(", "),a("code",[e._v("'red'")]),e._v(", "),a("code",[e._v("'silver'")]),e._v(", "),a("code",[e._v("'teal'")]),e._v(", "),a("code",[e._v("'white'")]),e._v(", "),a("code",[e._v("'yellow'")]),e._v(".")]),e._v(" "),a("p",[e._v("All color properties also accept a value of "),a("code",[e._v("'transparent'")]),e._v(".")]),e._v(" "),a("p",[e._v("On Android, if you want to create a semi-transparent window, set the "),a("code",[e._v("opacity")]),e._v("\nproperty "),a("strong",[e._v("before")]),e._v(" opening the window.")]),e._v(" "),a("p",[e._v("On iOS, you can set a global tinting using "),a("type-link",{attrs:{type:"Titanium.UI.tintColor"}},[e._v("Titanium.UI.tintColor")]),e._v(". All child views will inherit\nthe tint color by default and are able to override the color using "),a("code",[e._v("tintColor")]),e._v(" on their own views.\nThe default "),a("code",[e._v("tintColor")]),e._v(" on iOS is the blue (system-color).")],1),e._v(" "),a("p",[e._v("If a color property is undefined, the default color of the particular UI element is applied.\nIf a color value is not valid on iOS, the default color is applied, whereas, on Android, the\ncolor yellow is applied.")]),e._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("h3",{attrs:{id:"color-demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#color-demo","aria-hidden":"true"}},[e._v("#")]),e._v(" Color Demo")]),e._v(" "),a("p",[e._v("The following example demonstrates all the color formats, and color names, that are intended\nto be supported by Titanium. See the "),a("type-link",{attrs:{type:"Titanium.UI"}},[e._v("description")]),e._v(" section for details.")],1),e._v(" "),a("pre",[a("code",[e._v("var colorArray = [\n  '#ff00ff', '#f0f', 'rgb(255,0,255)',\n  'transparent', '#55ff00ff', '#5f0f', 'rgba(255,0,255,0.3)',\n  'aqua', 'black', 'blue', 'brown', 'cyan', 'darkgray', 'fuchsia', 'gray', 'green',\n  'lightgray', 'lime', 'magenta', 'maroon', 'navy', 'olive', 'orange', 'pink',\n  'purple', 'red', 'silver', 'teal', 'white', 'yellow',\n];\nvar win = Ti.UI.createWindow({\n  backgroundColor: 'black',\n  exitOnClose: true,\n  fullscreen: false,\n  layout: 'vertical',\n  title: 'Color Demo'\n});\nvar rows = [];\nvar row;\nfor (var i=0, ilen = colorArray.length; i < ilen; i++){\n  row = Ti.UI.createTableViewRow({\n    color:'black',\n    backgroundColor: colorArray[i],\n    title: colorArray[i],\n    height: 40\n  });\n  rows.push(row);\n}\nvar table = Ti.UI.createTableView({\n  data: rows,\n  backgroundColor: 'white'\n});\nwin.add(table);\nwin.open();\n")])]),e._v(" "),a("ApiDocs")],1)},[],!1,null,null,null);o.options.__file="ui.md";t.default=o.exports}}]);