(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{602:function(e,n,t){"use strict";t.r(n);var i=t(14),a=Object(i.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"titanium-android-menu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#titanium-android-menu","aria-hidden":"true"}},[e._v("#")]),e._v(" Titanium.Android.Menu")]),e._v(" "),t("ProxySummary"),e._v(" "),t("h2",{attrs:{id:"overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),t("p",[e._v("Starting with Release 3.3.0, the Menu and MenuItems APIs are used to create the action items\nfor the action bar. Action items can appear in either the action bar or the action bar's\noverflow menu.")]),e._v(" "),t("p",[e._v("To create action items with JavaScript, assign a callback function to the activity's\n"),t("type-link",{attrs:{type:"Titanium.Android.Activity.onCreateOptionsMenu"}},[e._v("onCreateOptionsMenu")]),e._v(" property.\nThe activity's menu object is passed in to the "),t("code",[e._v("onCreateOptionsMenu")]),e._v(" function when the menu is created.\nUse the Menu's "),t("type-link",{attrs:{type:"Titanium.Android.Menu.add"}},[e._v("add()")]),e._v(" method to create new action items.")],1),e._v(" "),t("p",[e._v("In Alloy you can use "),t("code",[e._v("<Menu>")]),e._v(" and "),t("code",[e._v("<MenuItem>")]),e._v(" elements to create an options menu.")]),e._v(" "),t("pre",[t("code",[e._v('<Menu id="menu" platform="android">\n    \x3c!-- Cannot specify node text.  Use attributes only. --\x3e\n    <MenuItem id="saveitem" title="Save" icon="item1.png" onClick="doSave" />\n    <MenuItem id="closeitem" title="Close" icon="item1.png" onClick="doClose" />\n</Menu>\n')])]),e._v(" "),t("p",[e._v("To switch menu items dynamically, call\n"),t("type-link",{attrs:{type:"Titanium.Android.Activity.invalidateOptionsMenu"}},[e._v("invalidateOptionsMenu")]),e._v(", which causes\nthe "),t("code",[e._v("onCreateOptionsMenu")]),e._v(" callback to be called again.")],1),e._v(" "),t("h3",{attrs:{id:"menus-on-tab-groups"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#menus-on-tab-groups","aria-hidden":"true"}},[e._v("#")]),e._v(" Menus on Tab Groups")]),e._v(" "),t("p",[e._v("Prior to Titanium 3.0, menu items could be added to the individual windows of a tab\ngroup.")]),e._v(" "),t("p",[e._v("Starting in Titanium 3.0, menus must be added to tab groups using the tab group's\nactivity. These changes were required to support the Android 3.0 action bar.")]),e._v(" "),t("p",[e._v("The TabGroup activity is available using "),t("type-link",{attrs:{type:"Titanium.UI.TabGroup.getActivity"}},[e._v("TabGroup.getActivity")]),e._v(".\nHowever, unlike a window's activity it is not currently possible to set properties on\nthe tab group's activity before the tab group is opened. To add a menu to a tab group,\nset the "),t("code",[e._v("onCreateOptionsMenu")]),e._v(" property to the tab group's "),t("code",[e._v("open")]),e._v(" event listener, and\nthen call "),t("code",[e._v("invalidateOptionsMenu")]),e._v(" to force the changes to take effect.")],1),e._v(" "),t("pre",[t("code",[e._v('tabGroup.addEventListener("open", function(e) {\n    var activity = globals.tabs.getActivity();\n    activity.onCreateOptionsMenu = function(e) {\n        var menuItem = e.menu.add({\n            title : "Add Task",\n            showAsAction : Ti.Android.SHOW_AS_ACTION_ALWAYS,\n            icon : "add_icon.png"\n        });\n        menuItem.addEventListener("click", function(e) {\n            //\n        });\n    }\n    activity.invalidateOptionsMenu();\n});\n')])]),e._v(" "),t("h3",{attrs:{id:"application-notes-for-release-3-2-x-and-earlier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#application-notes-for-release-3-2-x-and-earlier","aria-hidden":"true"}},[e._v("#")]),e._v(" Application Notes for Release 3.2.x and earlier")]),e._v(" "),t("p",[e._v("If you are using Release 3.2.x and earlier, the options menu is presented differently\nbased on the Android version and application settings.")]),e._v(" "),t("p",[e._v("On Android devices prior to Android 3.0 (API level 11), the menu is always presented\nas an options menu, which is displayed when the "),t("strong",[e._v("Menu")]),e._v(" button is pressed.")]),e._v(" "),t("p",[e._v("On Android 3.0 and later, menu items can be displayed as "),t("em",[e._v("action items")]),e._v(" in the action\nbar. To enable this, the application must be built with a theme that supports the\naction bar, such as the Holo theme. (See\n"),t("a",{attrs:{href:"https://docs.appcelerator.com/platform/latest/#!/guide/Android_Themes",target:"_blank",rel:"noopener noreferrer"}},[e._v("Android Themes"),t("OutboundLink")],1),e._v(" in\nthe Titanium Guides for information on setting your application's theme.)")]),e._v(" "),t("p",[e._v("For menu items displayed in the menu, the "),t("code",[e._v("onCreateOptionsMenu")]),e._v(" function is called\nonce, and the "),t("type-link",{attrs:{type:"Titanium.Android.Activity.onPrepareOptionsMenu"}},[e._v("onPrepareOptionsMenu")]),e._v(" callback function is called each\ntime the menu is opened. The "),t("code",[e._v("onPrepareOptionsMenu")]),e._v(" function can be used to switch menu items dynamically.")],1),e._v(" "),t("h3",{attrs:{id:"further-reading"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#further-reading","aria-hidden":"true"}},[e._v("#")]),e._v(" Further Reading")]),e._v(" "),t("p",[e._v("See also:")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://developer.android.com/guide/topics/ui/menus.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Menus"),t("OutboundLink")],1),e._v(" in the\nAndroid Developer Guides.")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.android.com/guide/topics/ui/actionbar.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Action Bar"),t("OutboundLink")],1),e._v(" in\nthe Android Developer Guides.")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://developer.android.com/reference/android/view/Menu.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Menu"),t("OutboundLink")],1),e._v("\nin the Android Developer Reference.")])])]),e._v(" "),t("h2",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),t("h3",{attrs:{id:"creating-a-simple-menu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-simple-menu","aria-hidden":"true"}},[e._v("#")]),e._v(" Creating a Simple Menu")]),e._v(" "),t("p",[e._v('This sample creates an Android menu that displays a menu item named "Item 1",\nwhich logs a debug message when clicked.')]),e._v(" "),t("p",[e._v("If the action bar is in use, the menu item will be displayed as an action item if there is room in the action bar.")]),e._v(" "),t("pre",[t("code",[e._v('var win = Ti.UI.createWindow({\n  fullscreen: true\n});\n\nvar activity = win.activity;\n\nactivity.onCreateOptionsMenu = function(e){\n  var menu = e.menu;\n  var menuItem = menu.add({\n    title: "Item 1",\n    icon:  "item1.png",\n    showAsAction: Ti.Android.SHOW_AS_ACTION_IF_ROOM\n  });\n  menuItem.addEventListener("click", function(e) {\n    Ti.API.debug("I was clicked");\n  });\n};\n\nwin.open();\n')])]),e._v(" "),t("h3",{attrs:{id:"creating-a-dynamic-menu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-dynamic-menu","aria-hidden":"true"}},[e._v("#")]),e._v(" Creating a Dynamic Menu")]),e._v(" "),t("p",[e._v('This sample creates an Android menu that displays a menu item named\n"Login" or "Logout", depending on the value of a '),t("code",[e._v("loggedIn")]),e._v(" Boolean variable.\nClick on the item to toggle the variable's value.")]),e._v(" "),t("pre",[t("code",[e._v('var win = Ti.UI.createWindow({\n  fullscreen: true\n});\nvar LOGIN = 1, LOGOUT = 2;\nvar loggedIn = false;\n\nvar activity = win.activity;\n\nactivity.onCreateOptionsMenu = function(e){\n  var menu = e.menu;\n  var login = menu.add({ title: "Login", itemId: LOGIN });\n  login.setIcon("login.png");\n  login.addEventListener("click", function(e) {\n    loggedIn = true;\n    // In Android 3.0 and above we need to call invalidateOptionsMenu() for menu changes at runtime\n    win.activity.invalidateOptionsMenu();\n  });\n  var logout = menu.add({ title: "Logout", itemId: LOGOUT });\n  logout.setIcon("logout.png");\n  logout.addEventListener("click", function(e) {\n    loggedIn = false;\n    // In Android 3.0 and above we need to call invalidateOptionsMenu() for menu changes at runtime\n    win.activity.invalidateOptionsMenu();\n  });\n};\n\nactivity.onPrepareOptionsMenu = function(e) {\n  var menu = e.menu;\n  menu.findItem(LOGIN).setVisible(!loggedIn);\n  menu.findItem(LOGOUT).setVisible(loggedIn);\n};\nwin.open();\n')])]),e._v(" "),t("h3",{attrs:{id:"alloy-xml-markup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#alloy-xml-markup","aria-hidden":"true"}},[e._v("#")]),e._v(" Alloy XML Markup")]),e._v(" "),t("p",[e._v("Previous simple menu example as an Alloy view.")]),e._v(" "),t("p",[e._v("Due to the way menus are created in Alloy, menus created using Alloy markup are not\ndisplayed until the options menu is invalidated. To force menus (or action items)\nto be displayed, call "),t("code",[e._v("invalidateOptionsMenu")]),e._v(" from the "),t("code",[e._v("open")]),e._v(" event listener of the window or tab group\nwhere the menu is defined.")]),e._v(" "),t("p",[e._v("index.xml:")]),e._v(" "),t("pre",[t("code",[e._v('<Alloy>\n    \x3c!-- Create a heavyweight window to use the Android menu. --\x3e\n    <Window id="win" fullscreen="true" onOpen="doOpen">\n\n        \x3c!-- The Menu tag adds the Android menu. --\x3e\n        <Menu id="menu" platform="android">\n\n            \x3c!-- Cannot specify node text.  Use attributes only. --\x3e\n            <MenuItem id="menuItem" title="Item 1" icon="item1.png" onClick="doClick" showAsAction="Ti.Android.SHOW_AS_ACTION_IF_ROOM" />\n        </Menu>\n\n        \x3c!-- Place additional views here --\x3e\n    </Window>\n</Alloy>\n')])]),e._v(" "),t("p",[e._v("index.js:")]),e._v(" "),t("pre",[t("code",[e._v('function doClick(e) {\n    Ti.API.info("Menu item clicked: " + e.source.title);\n}\n\n// Ensure menu is displayed\nfunction doOpen(e) {\n    $.win.invalidateOptionsMenu();\n}\n')])]),e._v(" "),t("ApiDocs")],1)},[],!1,null,null,null);a.options.__file="menu.md";n.default=a.exports}}]);