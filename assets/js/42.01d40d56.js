(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{315:function(e,o,n){"use strict";n.r(o);var t=n(14),c=Object(t.a)({},function(){var e=this,o=e.$createElement,n=e._self._c||o;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"modules-cloud-photocollections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#modules-cloud-photocollections","aria-hidden":"true"}},[e._v("#")]),e._v(" Modules.Cloud.PhotoCollections")]),e._v(" "),n("ProxySummary"),e._v(" "),n("h2",{attrs:{id:"examples"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),n("h3",{attrs:{id:"create-photo-collection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-photo-collection","aria-hidden":"true"}},[e._v("#")]),e._v(" Create Photo Collection")]),e._v(" "),n("p",[e._v("This example creates a new photo collection and checks the response.")]),e._v(" "),n("pre",[n("code",[e._v("Cloud.PhotoCollections.create({\n    name: 'Party Pictures'\n}, function (e) {\n    if (e.success) {\n        var collection = e.collections[0];\n        alert('Success:\\n' +\n            'id: ' + collection.id + '\\n' +\n            'name: ' + collection.name + '\\n' +\n            'count: ' + collection.counts.total_photos + '\\n'\n            'updated_at: ' + collection.updated_at);\n    } else {\n        alert('Error:\\n' +\n            ((e.error && e.message) || JSON.stringify(e)));\n    }\n});\n")])]),e._v(" "),n("h3",{attrs:{id:"show-a-photo-collection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#show-a-photo-collection","aria-hidden":"true"}},[e._v("#")]),e._v(" Show a Photo Collection")]),e._v(" "),n("p",[e._v("This example retrieves information about a photo collection and checks the response.")]),e._v(" "),n("pre",[n("code",[e._v("Cloud.PhotoCollections.show({\n    collection_id: savedPhotoCollectionId\n}, function (e) {\n    if (e.success) {\n        var collection = e.collections[0];\n        alert('Success:\\n' +\n            'id: ' + collection.id + '\\n' +\n            'name: ' + collection.name + '\\n' +\n            'count: ' + collection.counts.total_photos + '\\n'\n            'updated_at: ' + collection.updated_at);\n    } else {\n        alert('Error:\\n' +\n            ((e.error && e.message) || JSON.stringify(e)));\n    }\n});\n")])]),e._v(" "),n("h3",{attrs:{id:"search-for-photo-collections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#search-for-photo-collections","aria-hidden":"true"}},[e._v("#")]),e._v(" Search for Photo Collections")]),e._v(" "),n("p",[e._v("This example searches for collections and checks the response.")]),e._v(" "),n("pre",[n("code",[e._v("Cloud.PhotoCollections.search({\n    user_id: savedUserId\n}, function (e) {\n    if (e.success) {\n        alert('Success:\\n' +\n            'Count: ' + e.collections.length);\n        for (var i = 0; i < e.collections.length; i++) {\n            var collection = e.collections[i];\n            alert('Success:\\n' +\n                'id: ' + collection.id + '\\n' +\n                'name: ' + collection.name + '\\n' +\n                'count: ' + collection.counts.total_photos + '\\n'\n                'updated_at: ' + collection.updated_at);\n        }\n    } else {\n        alert('Error:\\n' +\n            ((e.error && e.message) || JSON.stringify(e)));\n    }\n});\n")])]),e._v(" "),n("h3",{attrs:{id:"show-photo-subcollections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#show-photo-subcollections","aria-hidden":"true"}},[e._v("#")]),e._v(" Show Photo Subcollections")]),e._v(" "),n("p",[e._v("This example requests a list of photo subcollections and checks the response.")]),e._v(" "),n("pre",[n("code",[e._v("Cloud.PhotoCollections.showSubcollections({\n    page: 1,\n    per_page: 20,\n    collection_id: savedCollectionId\n}, function (e) {\n    if (e.success) {\n        alert('Success:\\n' +\n            'Count: ' + e.collections.length);\n        for (var i = 0; i < e.collections.length; i++) {\n            var collection = e.collections[i];\n            alert('Success:\\n' +\n                'id: ' + collection.id + '\\n' +\n                'name: ' + collection.name + '\\n' +\n                'count: ' + collection.counts.total_photos + '\\n'\n                'updated_at: ' + collection.updated_at);\n        }\n    } else {\n        alert('Error:\\n' +\n            ((e.error && e.message) || JSON.stringify(e)));\n    }\n});\n")])]),e._v(" "),n("h3",{attrs:{id:"show-photo-collection-photos"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#show-photo-collection-photos","aria-hidden":"true"}},[e._v("#")]),e._v(" Show Photo Collection Photos")]),e._v(" "),n("p",[e._v("This example requests a list of photos in a photo collections and checks the response.")]),e._v(" "),n("pre",[n("code",[e._v("Cloud.PhotoCollections.showPhotos({\n    page: 1,\n    per_page: 20,\n    collection_id: savedCollectionId\n}, function (e) {\n    if (e.success) {\n        if (!e.photos) {\n            alert('Success: No photos');\n        } else {\n            alert('Success:\\n' +\n                'Count: ' + e.collections.length);\n            for (var i = 0; i < e.collections.length; i++) {\n                var collection = e.collections[i];\n                alert('Success:\\n' +\n                    'id: ' + collection.id + '\\n' +\n                    'name: ' + collection.name + '\\n' +\n                    'count: ' + collection.counts.total_photos + '\\n'\n                    'updated_at: ' + collection.updated_at);\n            }\n        }\n    } else {\n        alert('Error:\\n' +\n            ((e.error && e.message) || JSON.stringify(e)));\n    }\n});\n")])]),e._v(" "),n("h3",{attrs:{id:"update-a-photo-collection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#update-a-photo-collection","aria-hidden":"true"}},[e._v("#")]),e._v(" Update a Photo Collection")]),e._v(" "),n("p",[e._v("This example updates a photo collection and checks the response.")]),e._v(" "),n("pre",[n("code",[e._v("Cloud.PhotoCollections.update({\n    collection_id: savedPhotoCollectionId,\n    cover_photo_id: savedPhotoId\n}, function (e) {\n    if (e.success) {\n        var collection = e.collections[0];\n        alert('Success:\\n' +\n            'id: ' + collection.id + '\\n' +\n            'name: ' + collection.name + '\\n' +\n            'count: ' + collection.counts.total_photos + '\\n'\n            'updated_at: ' + collection.updated_at);\n    } else {\n        alert('Error:\\n' +\n            ((e.error && e.message) || JSON.stringify(e)));\n    }\n});\n")])]),e._v(" "),n("h3",{attrs:{id:"remove-a-photo-collection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#remove-a-photo-collection","aria-hidden":"true"}},[e._v("#")]),e._v(" Remove a Photo Collection")]),e._v(" "),n("p",[e._v("This example deletes a photo collection and checks the response.")]),e._v(" "),n("pre",[n("code",[e._v("Cloud.PhotoCollections.remove({\n    collection_id: savedPhotoCollectionId\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error && e.message) || JSON.stringify(e)));\n    }\n});\n")])]),e._v(" "),n("ApiDocs")],1)},[],!1,null,null,null);c.options.__file="photocollections.md";o.default=c.exports}}]);