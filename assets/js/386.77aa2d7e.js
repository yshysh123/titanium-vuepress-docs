(window.webpackJsonp=window.webpackJsonp||[]).push([[386],{676:function(e,t,i){"use strict";i.r(t);var n=i(14),a=Object(n.a)({},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"titanium-ui-listview"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#titanium-ui-listview","aria-hidden":"true"}},[e._v("#")]),e._v(" Titanium.UI.ListView")]),e._v(" "),i("ProxySummary"),e._v(" "),i("h2",{attrs:{id:"overview"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),i("table",{attrs:{id:"platformComparison"}},[i("tr",[i("td",[i("img",{staticStyle:{border:"1px solid black"},attrs:{src:"images/listview/listview_android.png",height:"200"}})]),e._v(" "),i("td",[i("img",{staticStyle:{border:"1px solid black"},attrs:{src:"images/listview/listview_ios.png",height:"200"}})]),e._v(" "),i("td",[i("img",{staticStyle:{border:"1px solid black"},attrs:{src:"images/listview/listview_wp.png",height:"200"}})])]),e._v(" "),i("tr",[i("th",[e._v("Android")]),i("th",[e._v("iOS")]),i("th",[e._v("Windows Phone")])])]),e._v(" "),i("p",[e._v("Use the "),i("type-link",{attrs:{type:"Titanium.UI.createListView"}},[e._v("Titanium.UI.createListView")]),e._v(" method or "),i("strong",[i("code",[e._v("<ListView>")])]),e._v(" Alloy element to create a "),i("code",[e._v("ListView")]),e._v(".")],1),e._v(" "),i("p",[e._v("A "),i("code",[e._v("ListView")]),e._v(" object is a container for "),i("type-link",{attrs:{type:"Titanium.UI.ListSection"}},[e._v("ListSection")]),e._v("\nobjects that are, in turn, containers for "),i("type-link",{attrs:{type:"Titanium.UI.ListItem"}},[e._v("ListItem")]),e._v(" objects. This is\neasily visualized as an Alloy view:")],1),e._v(" "),i("pre",[i("code",[e._v('<Alloy>\n    <ListView id="list">\n        <ListSection>\n            <ListItem title="List item 1"></ListItem>\n            <ListItem title="List item 2"></ListItem>\n            <ListItem title="List item 3"></ListItem>\n        </ListSection>\n    </ListView>\n</Alloy>        \n')])]),e._v(" "),i("p",[e._v("For more instructions and examples of using "),i("code",[e._v("ListView")]),e._v(", refer to the\n"),i("a",{attrs:{href:"https://docs.appcelerator.com/platform/latest/#!/guide/ListViews",target:"_blank",rel:"noopener noreferrer"}},[e._v("ListViews guide"),i("OutboundLink")],1),e._v(".")]),e._v(" "),i("h3",{attrs:{id:"creating-a-list"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-list","aria-hidden":"true"}},[e._v("#")]),e._v(" Creating a List")]),e._v(" "),i("p",[e._v("To create a "),i("code",[e._v("ListView")]),e._v(" object using JavaScript, pass an array of "),i("type-link",{attrs:{type:"ListDataItem"}},[e._v("ListDataItem")]),e._v(" objects to the list section's\n"),i("type-link",{attrs:{type:"Titanium.UI.ListSection.items"}},[e._v("items")]),e._v(" property, which creates and adds each array\nelement as a row to a single "),i("type-link",{attrs:{type:"Titanium.UI.ListSection"}},[e._v("ListSection")]),e._v(". Use the "),i("code",[e._v("ListView")]),e._v("'s\n"),i("type-link",{attrs:{type:"Titanium.UI.ListView.sections"}},[e._v("sections")]),e._v(" property to add the section(s) to the list view.")],1),e._v(" "),i("p",[e._v("By default, only the "),i("code",[e._v("image")]),e._v(", "),i("code",[e._v("title")]),e._v(" and "),i("code",[e._v("accessoryType")]),e._v(" of a list data item\nare displayed in the list. Refer to the next section for using an item template.")]),e._v(" "),i("p",[e._v('See the "List View Sections" example.')]),e._v(" "),i("h3",{attrs:{id:"customizing-the-list-items"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#customizing-the-list-items","aria-hidden":"true"}},[e._v("#")]),e._v(" Customizing the List Items")]),e._v(" "),i("p",[e._v("To create a custom list view, you need to define an "),i("type-link",{attrs:{type:"ItemTemplate"}},[e._v("ItemTemplate")]),e._v(" and define each view\ncomponent you want to add. Use the "),i("code",[e._v("bindId")]),e._v(" property of the child template to bind a dictionary\nproperty in the item data to a child view component.")],1),e._v(" "),i("p",[e._v("Map the template to a style name using the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.templates"}},[e._v("Titanium.UI.ListView.templates")]),e._v(" property, then use\nthe style name to  set the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.defaultItemTemplate"}},[e._v("Titanium.UI.ListView.defaultItemTemplate")]),e._v(" property to globally change\nall item styles or set the "),i("type-link",{attrs:{type:"ListDataItem.template"}},[e._v("ListDataItem.template")]),e._v(" property when passing in your list data\nto apply the template to that one list item or to override the globally defined template.")],1),e._v(" "),i("p",[e._v("On iOS, you can specify one of the template constants for the "),i("type-link",{attrs:{type:"ListDataItem.template"}},[e._v("ListDataItem.template")]),e._v(" property\nor "),i("type-link",{attrs:{type:"Titanium.UI.ListView.defaultItemTemplate"}},[e._v("Titanium.UI.ListView.defaultItemTemplate")]),e._v(":\n"),i("type-link",{attrs:{type:"Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS"}},[e._v("Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS")]),e._v(", "),i("type-link",{attrs:{type:"Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS"}},[e._v("Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS")]),e._v("\nor "),i("type-link",{attrs:{type:"Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE"}},[e._v("Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE")]),e._v(".")],1),e._v(" "),i("p",[e._v("See "),i("type-link",{attrs:{type:"Titanium.UI.ListItem"}},[e._v("Titanium.UI.ListItem")]),e._v(' for a detailed description of creating list items with a custom\nitem template and see the "List View with Custom Item Template" example for a sample.')],1),e._v(" "),i("h3",{attrs:{id:"list-and-table-views"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#list-and-table-views","aria-hidden":"true"}},[e._v("#")]),e._v(" List and Table Views")]),e._v(" "),i("p",[e._v("This section describes the differences between the new list view and the old table view.")]),e._v(" "),i("p",[i("code",[e._v("ListView")]),e._v(" is analogous to "),i("code",[e._v("TableView")]),e._v(", "),i("code",[e._v("ListSection")]),e._v(" is analogous to "),i("code",[e._v("TableViewSection")]),e._v(", and\n"),i("code",[e._v("ListItem")]),e._v(" is analogous to "),i("code",[e._v("TableViewRow")]),e._v(".")]),e._v(" "),i("p",[e._v("Both list view and table view present data to user as a vertically scrolling list of rows.\nHowever, list view uses a data-oriented approach versus table view's view-oriented approach.")]),e._v(" "),i("p",[e._v("List view is designed for performance. One side effect of the design is that you cannot directly\nmanipulate the views--add children, set view properties and bind event callbacks--as you can in\n"),i("code",[e._v("TableView")]),e._v(". Instead, you interact with list items indirectly, using templates and data items. The\nnext subsection describes how to use list items.")]),e._v(" "),i("h4",{attrs:{id:"listitem-versus-tableviewrow"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#listitem-versus-tableviewrow","aria-hidden":"true"}},[e._v("#")]),e._v(" ListItem versus TableViewRow")]),e._v(" "),i("p",[e._v("With "),i("code",[e._v("TableView")]),e._v(", you can directly add rows to a table view using the data property and its accessors.\nWith "),i("code",[e._v("TableViewRows")]),e._v(", you can directly create a row using the "),i("code",[e._v("Ti.UI.createTableViewRow")]),e._v(" and customize\nits styling by setting its view properties. You can add view subcomponents to the row using the add\nmethod.")]),e._v(" "),i("p",[e._v("With "),i("code",[e._v("ListView")]),e._v(", you need to explicitly create a "),i("code",[e._v("ListSection")]),e._v(" in order to add a "),i("code",[e._v("ListItem")]),e._v(" to a "),i("code",[e._v("ListView")]),e._v(".\nYou cannot directly add a "),i("code",[e._v("ListItem")]),e._v(" to a "),i("code",[e._v("ListView")]),e._v(".\nIn a "),i("code",[e._v("TableView")]),e._v(", a "),i("code",[e._v("TableViewRow")]),e._v(" can be directly added to a "),i("code",[e._v("TableView")]),e._v(" because a\n"),i("code",[e._v("TableViewSection")]),e._v(" is implicitly created and added to the "),i("code",[e._v("TableView")]),e._v(".")]),e._v(" "),i("p",[e._v("A "),i("code",[e._v("ListItem")]),e._v(" object is not created in the same method as a "),i("code",[e._v("TableViewRow")]),e._v(".\nA "),i("code",[e._v("ListItem")]),e._v(" is create by passing an array of "),i("code",[e._v("ListDataItem")]),e._v(" objects to the "),i("code",[e._v("ListSection")]),e._v(".")]),e._v(" "),i("p",[e._v("You cannot add views to a "),i("code",[e._v("ListItem")]),e._v(" using the "),i("code",[e._v("add")]),e._v(" method, which could be done with a\n"),i("code",[e._v("TableViewRow")]),e._v(". To add views to a "),i("code",[e._v("ListItem")]),e._v(", you need to define an "),i("type-link",{attrs:{type:"ItemTemplate"}},[e._v("ItemTemplate")]),e._v(",\nwhich is bound to a list data item using the "),i("code",[e._v("template")]),e._v(" property.")],1),e._v(" "),i("p",[e._v("You cannot explicitly set properties or bind events for a "),i("code",[e._v("ListItem")]),e._v(".  You have to set them using the\n"),i("code",[e._v("properties")]),e._v(" dictionary of a "),i("type-link",{attrs:{type:"ListDataItem"}},[e._v("ListDataItem")]),e._v(" or "),i("type-link",{attrs:{type:"ItemTemplate"}},[e._v("ItemTemplate")]),e._v(" and the "),i("code",[e._v("events")]),e._v(" dictionary of the\n"),i("type-link",{attrs:{type:"ItemTemplate"}},[e._v("ItemTemplate")]),e._v(" or "),i("type-link",{attrs:{type:"ViewTemplate"}},[e._v("ViewTemplate")]),e._v(", respectively.")],1),e._v(" "),i("h4",{attrs:{id:"api-differences"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#api-differences","aria-hidden":"true"}},[e._v("#")]),e._v(" API Differences")]),e._v(" "),i("ul",[i("li",[i("p",[i("strong",[e._v("TableViewRow properties")]),e._v(": The following properties and their accessors are not\navailable for "),i("code",[e._v("ListItem")]),e._v(": "),i("code",[e._v("accessibilityLabel")]),e._v(", "),i("code",[e._v("className")]),e._v(", "),i("code",[e._v("editable")]),e._v(", "),i("code",[e._v("hasCheck")]),e._v(",\n"),i("code",[e._v("hasChild")]),e._v(", "),i("code",[e._v("hasDetail")]),e._v(", "),i("code",[e._v("leftImage")]),e._v(", "),i("code",[e._v("moveable")]),e._v(" and "),i("code",[e._v("rightImage")]),e._v(".")]),e._v(" "),i("ul",[i("li",[e._v("For "),i("code",[e._v("hasCheck")]),e._v(", "),i("code",[e._v("hasChild")]),e._v(", and "),i("code",[e._v("hasDetail")]),e._v(", use the "),i("code",[e._v("accessoryType")]),e._v(" property.")]),e._v(" "),i("li",[e._v("For "),i("code",[e._v("leftImage")]),e._v(" and "),i("code",[e._v("rightImage")]),e._v(", use the "),i("code",[e._v("image")]),e._v(" property or create a custom item template.")])])]),e._v(" "),i("li",[i("p",[i("strong",[e._v("TableViewRow methods")]),e._v(": "),i("code",[e._v("ListItem")]),e._v(" does not support any methods. Adding views and binding\nevent callbacks are supported through the item template.")])]),e._v(" "),i("li",[i("p",[i("strong",[e._v("TableViewSection properties")]),e._v(": The following properties and their accessors are not\nsupported by "),i("code",[e._v("ListSection")]),e._v(": "),i("code",[e._v("rows")]),e._v(" and "),i("code",[e._v("rowCount")]),e._v(".")]),e._v(" "),i("ul",[i("li",[e._v("For "),i("code",[e._v("rows")]),e._v(", use the "),i("code",[e._v("items")]),e._v(" property.")]),e._v(" "),i("li",[e._v("For "),i("code",[e._v("rowCount")]),e._v(", use the "),i("code",[e._v("itemCount")]),e._v(" property. (Not yet implemented.)")])])]),e._v(" "),i("li",[i("p",[i("strong",[e._v("TableViewSection methods")]),e._v(": The following methods are not supported by "),i("code",[e._v("ListSection")]),e._v(":\n"),i("code",[e._v("add")]),e._v(", "),i("code",[e._v("remove")]),e._v(" and "),i("code",[e._v("rowAtIndex")]),e._v(".")]),e._v(" "),i("ul",[i("li",[e._v("For "),i("code",[e._v("rowAtIndex")]),e._v(", use the "),i("code",[e._v("getItemAt")]),e._v(" method.")]),e._v(" "),i("li",[e._v("For "),i("code",[e._v("add")]),e._v(" and "),i("code",[e._v("remove")]),e._v(", use the other "),i("code",[e._v("ListSection")]),e._v(" methods to manipulate the "),i("code",[e._v("ListItem")]),e._v("\nobjects in the "),i("code",[e._v("ListSection")]),e._v(".")])])]),e._v(" "),i("li",[i("p",[i("strong",[e._v("TableView properties")]),e._v(": The "),i("code",[e._v("data")]),e._v(" property and its accessors are not available\nfor "),i("code",[e._v("ListView")]),e._v(". Use the "),i("code",[e._v("sections")]),e._v(" property to set the "),i("code",[e._v("ListSections")]),e._v(" for a "),i("code",[e._v("ListView")]),e._v(".  You\ncannot directly add "),i("code",[e._v("ListItem")]),e._v(" objects to a "),i("code",[e._v("ListView")]),e._v(".")])]),e._v(" "),i("li",[i("p",[i("strong",[e._v("TableView methods")]),e._v(": The following methods are not available to "),i("code",[e._v("ListView")]),e._v(":\n"),i("code",[e._v("appendRow")]),e._v(", "),i("code",[e._v("deleteRow")]),e._v(", "),i("code",[e._v("deselectRow")]),e._v(", "),i("code",[e._v("insertRowAfter")]),e._v(", "),i("code",[e._v("insertRowBefore")]),e._v(", "),i("code",[e._v("selectRow")]),e._v(",\n"),i("code",[e._v("updateRow")]),e._v(", "),i("code",[e._v("scrollToIndex")]),e._v(" and "),i("code",[e._v("selectRow")]),e._v(".")]),e._v(" "),i("ul",[i("li",[e._v("For "),i("code",[e._v("scrollToIndex")]),e._v(", use the "),i("code",[e._v("scrollToItem")]),e._v(" method.")]),e._v(" "),i("li",[e._v("For "),i("code",[e._v("selectRow")]),e._v(", use the "),i("code",[e._v("selectItem")]),e._v(" method. (Currently implemented only for iOS.)")]),e._v(" "),i("li",[e._v("For all other row methods, you cannot manipulate "),i("code",[e._v("ListItems")]),e._v(" with a "),i("code",[e._v("ListView")]),e._v(".\nYou have to manipulate them with the "),i("code",[e._v("ListSection")]),e._v(" they are contained in.")])])])]),e._v(" "),i("h3",{attrs:{id:"list-and-scroll-views"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#list-and-scroll-views","aria-hidden":"true"}},[e._v("#")]),e._v(" List and Scroll Views")]),e._v(" "),i("p",[e._v("As a list view inherently scrolls, it creates a very poor user experience when it contains\nother scrolling views, such as a "),i("type-link",{attrs:{type:"Titanium.UI.ScrollableView"}},[e._v("ScrollableView")]),e._v(" or\n"),i("type-link",{attrs:{type:"Titanium.UI.TextArea"}},[e._v("TextArea")]),e._v(". Thus, this layout is strongly discouraged.")],1),e._v(" "),i("h3",{attrs:{id:"textfields-in-lists-with-soft-input-adjust-pan-android"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#textfields-in-lists-with-soft-input-adjust-pan-android","aria-hidden":"true"}},[e._v("#")]),e._v(" TextFields in Lists with SOFT_INPUT_ADJUST_PAN (Android)")]),e._v(" "),i("p",[e._v("In order to use "),i("type-link",{attrs:{type:"Titanium.UI.TextField"}},[e._v("TextField")]),e._v(" inside "),i("code",[e._v("ListView")]),e._v(", "),i("type-link",{attrs:{type:"Titanium.UI.Android.SOFT_INPUT_ADJUST_PAN"}},[e._v("SOFT_INPUT_ADJUST_PAN")]),e._v("\nmust be set to the window that is containing the "),i("code",[e._v("ListView")]),e._v(", otherwise the "),i("type-link",{attrs:{type:"Titanium.UI.TextField"}},[e._v("TextField")]),e._v(" may not be able to gain focus.")],1),e._v(" "),i("p",[e._v("When a "),i("type-link",{attrs:{type:"Titanium.UI.TextField"}},[e._v("TextField")]),e._v(" is placed in a row near the bottom of a "),i("code",[e._v("ListView")]),e._v(",\nin a window that is configured with\n"),i("type-link",{attrs:{type:"Titanium.UI.Android.SOFT_INPUT_ADJUST_PAN"}},[e._v("SOFT_INPUT_ADJUST_PAN")]),e._v(", it is expected for the\ntext field to automatically move to a visible position after it is focused and the software\nkeyboard displayed. However, due to a known problem caused by native Android's "),i("code",[e._v("ListView")]),e._v(" behavior,\nthe keyboard is likely to completely obscure the text field.")],1),e._v(" "),i("p",[e._v("To mitigate this, a "),i("code",[e._v("ScrollView")]),e._v(" may be used instead of a list view, as demonstrated in the\n"),i("type-link",{attrs:{type:"Titanium.UI.ScrollView"}},[e._v("ScrollView")]),e._v(', "Scroll View as a Table View", example.')],1),e._v(" "),i("h3",{attrs:{id:"editing-support-ios"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#editing-support-ios","aria-hidden":"true"}},[e._v("#")]),e._v(" Editing Support (iOS)")]),e._v(" "),i("p",[e._v("Editing a ListView through user initiated actions is supported through the following properties.")]),e._v(" "),i("ul",[i("li",[i("p",[i("strong",[e._v("ListItem properties")]),e._v(":")]),e._v(" "),i("ul",[i("li",[i("p",[i("type-link",{attrs:{type:"Titanium.UI.ListItem.canEdit"}},[e._v("canEdit")]),e._v(" - When this is set to true, it allows the item to be deleted\nfrom the ListView through a user initiated action. The item can only be deleted when the ListView is\nin editing mode. The ListView can enter 'editing' mode either by explicitly setting the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.editing"}},[e._v("editing")]),e._v("\nproperty to true, or by swiping accross an item whose "),i("code",[e._v("canEdit")]),e._v(" property is set to true. When the user\ndeletes the item, a "),i("type-link",{attrs:{type:"Titanium.UI.ListView.delete"}},[e._v("delete")]),e._v(" event is fired.")],1)]),e._v(" "),i("li",[i("p",[i("type-link",{attrs:{type:"Titanium.UI.ListItem.editActions"}},[e._v("editActions")]),e._v(" - When "),i("type-link",{attrs:{type:"Titanium.UI.ListItem.canEdit"}},[e._v("canEdit")]),e._v(" is set to true, the default behavior\nis to allow the item to be deleted. This behavior can be overridden by using the "),i("type-link",{attrs:{type:"Titanium.UI.ListItem.editActions"}},[e._v("editActions")]),e._v("\nproperty of the item. When this property is defined, the user is instead presented with the options as defined by the "),i("type-link",{attrs:{type:"RowActionType.title"}},[e._v("title")]),e._v(" property.\nIn this scenario the ListView does not fire a "),i("type-link",{attrs:{type:"Titanium.UI.ListView.delete"}},[e._v("delete")]),e._v(" event. Instead the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.editaction"}},[e._v("editaction")]),e._v(" event is fired\nand the developer is free to update the ListView as required. This is supported on Titanium SDK 4.1.0 and later on the iOS platform.")],1)]),e._v(" "),i("li",[i("p",[i("type-link",{attrs:{type:"Titanium.UI.ListItem.canInsert"}},[e._v("canInsert")]),e._v(" - When this is set to true, it allows the item to insert a new item to the\nListView through a user initiated action. A new item can only be inserted when the ListView is\nin editing mode. The ListView can enter 'editing' mode by explicitly setting the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.editing"}},[e._v("editing")]),e._v("\nproperty to true. When the user clicks on the '+' sign of the item, an "),i("type-link",{attrs:{type:"Titanium.UI.ListView.insert"}},[e._v("insert")]),e._v(" event is fired.\nNote: A new item is not inserted automatically when clicking on the '+' sign to let you decide the way to insert a new item.\nYou can use any inserting method of "),i("type-link",{attrs:{type:"Titanium.UI.ListSection"}},[e._v("Ti.UI.ListSection")]),e._v(", for example "),i("type-link",{attrs:{type:"Titanium.UI.ListSection.insertItemsAt"}},[e._v("insertItemsAt")]),e._v("\nand "),i("type-link",{attrs:{type:"Titanium.UI.ListSection.appendItems"}},[e._v("appendItems")]),e._v(".")],1)]),e._v(" "),i("li",[i("p",[i("type-link",{attrs:{type:"Titanium.UI.ListItem.canMove"}},[e._v("canMove")]),e._v(" - When this item is set to true, it allows the item to be moved\nto a different location within the ListView. The item can only be moved when the ListView is put in\nediting mode by explicitly setting the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.editing"}},[e._v("editing")]),e._v(" property to true. When the\nuser moves an item, a "),i("type-link",{attrs:{type:"Titanium.UI.ListView.move"}},[e._v("move")]),e._v(" event is fired.")],1)])])]),e._v(" "),i("li",[i("p",[i("strong",[e._v("ListView properties")]),e._v(":")]),e._v(" "),i("ul",[i("li",[i("p",[i("type-link",{attrs:{type:"Titanium.UI.ListView.editing"}},[e._v("editing")]),e._v(" - Determines if the List View is in a state where items can\nbe deleted or reordered.")],1)]),e._v(" "),i("li",[i("p",[i("type-link",{attrs:{type:"Titanium.UI.ListView.pruneSectionsOnEdit"}},[e._v("pruneSectionsOnEdit")]),e._v(" - When this property is set to true and the\nuser action results in a section having no other items, the section is deleted from the List View. Please note\nthat this property only applies to the sections whose items are being edited.")],1)])])])]),e._v(" "),i("h2",{attrs:{id:"examples"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),i("h3",{attrs:{id:"list-view-sections"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#list-view-sections","aria-hidden":"true"}},[e._v("#")]),e._v(" List View Sections")]),e._v(" "),i("p",[e._v("Creates a list with three sections, each with two rows.\nAdds two sections to the table before and one after it is rendered.")]),e._v(" "),i("pre",[i("code",[e._v("var win = Ti.UI.createWindow({backgroundColor: 'white'});\nvar listView = Ti.UI.createListView();\nvar sections = [];\n\nvar fruitSection = Ti.UI.createListSection({ headerTitle: 'Fruits'});\nvar fruitDataSet = [\n    {properties: { title: 'Apple'}},\n    {properties: { title: 'Banana'}},\n];\nfruitSection.setItems(fruitDataSet);\nsections.push(fruitSection);\n\nvar vegSection = Ti.UI.createListSection({ headerTitle: 'Vegetables'});\nvar vegDataSet = [\n    {properties: { title: 'Carrots'}},\n    {properties: { title: 'Potatoes'}},\n];\nvegSection.setItems(vegDataSet);\nsections.push(vegSection);\n\nlistView.sections = sections;\nwin.add(listView);\nwin.open();\n\nvar fishSection = Ti.UI.createListSection({ headerTitle: 'Fish'});\nvar fishDataSet = [\n    {properties: { title: 'Cod'}},\n    {properties: { title: 'Haddock'}},\n];\nfishSection.setItems(fishDataSet);\nlistView.appendSection(fishSection);\n")])]),e._v(" "),i("h3",{attrs:{id:"list-view-with-custom-item-template"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#list-view-with-custom-item-template","aria-hidden":"true"}},[e._v("#")]),e._v(" List View with Custom Item Template")]),e._v(" "),i("p",[e._v("Modifies the previous example to create a list using an item template to customize the view layout.")]),e._v(" "),i("pre",[i("code",[e._v("var win = Ti.UI.createWindow({backgroundColor: 'white'});\n\n// Create a custom template that displays an image on the left, \n// then a title next to it with a subtitle below it.\nvar myTemplate = {\n    childTemplates: [\n        {                            // Image justified left\n            type: 'Ti.UI.ImageView', // Use an image view for the image\n            bindId: 'pic',           // Maps to a custom pic property of the item data\n            properties: {            // Sets the image view  properties\n                width: '50dp', height: '50dp', left: 0\n            }\n        },\n        {                            // Title \n            type: 'Ti.UI.Label',     // Use a label for the title \n            bindId: 'info',          // Maps to a custom info property of the item data\n            properties: {            // Sets the label properties\n                color: 'black',\n                font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },\n                left: '60dp', top: 0,\n            }\n        },\n        {                            // Subtitle\n            type: 'Ti.UI.Label',     // Use a label for the subtitle\n            bindId: 'es_info',       // Maps to a custom es_info property of the item data\n            properties: {            // Sets the label properties\n                color: 'gray',\n                font: { fontFamily:'Arial', fontSize: '14dp' },\n                left: '60dp', top: '25dp',\n            }\n        }\n    ]\n};\n\nvar listView = Ti.UI.createListView({\n    // Maps myTemplate dictionary to 'template' string\n    templates: { 'template': myTemplate },\n    // Use 'template', that is, the myTemplate dict created earlier\n    // for all items as long as the template property is not defined for an item.\n    defaultItemTemplate: 'template'\n});\nvar sections = [];\n\nvar fruitSection = Ti.UI.createListSection({ headerTitle: 'Fruits / Frutas'});\nvar fruitDataSet = [\n    // the text property of info maps to the text property of the title label\n    // the text property of es_info maps to text property of the subtitle label\n    // the image property of pic maps to the image property of the image view\n    { info: {text: 'Apple'}, es_info: {text: 'Manzana'}, pic: {image: 'apple.png'}},\n    { info: {text: 'Banana'}, es_info: {text: 'Banana'}, pic: {image: 'banana.png'}}\n];\nfruitSection.setItems(fruitDataSet);\nsections.push(fruitSection);\n\nvar vegSection = Ti.UI.createListSection({ headerTitle: 'Vegetables / Verduras'});\nvar vegDataSet = [\n    { info: {text: 'Carrot'}, es_info: {text: 'Zanahoria'}, pic: {image: 'carrot.png'}},\n    { info: {text: 'Potato'}, es_info: {text: 'Patata'}, pic: {image: 'potato.png'}}\n];\nvegSection.setItems(vegDataSet);\nsections.push(vegSection);\n\nvar grainSection = Ti.UI.createListSection({ headerTitle: 'Grains / Granos'});\nvar grainDataSet = [\n    { info: {text: 'Corn'}, es_info: {text: 'Maiz'}, pic: {image: 'corn.png'}},\n    { info: {text: 'Rice'}, es_info: {text: 'Arroz'}, pic: {image: 'rice.png'}}\n];\ngrainSection.setItems(grainDataSet);\nsections.push(grainSection);\n\nlistView.setSections(sections);\nwin.add(listView);\nwin.open();\n")])]),e._v(" "),i("h3",{attrs:{id:"list-view-with-a-pullview-only-supported-on-ios-since-3-2-0"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#list-view-with-a-pullview-only-supported-on-ios-since-3-2-0","aria-hidden":"true"}},[e._v("#")]),e._v(" List View with a pullView (Only supported on iOS since 3.2.0)")]),e._v(" "),i("p",[e._v("This sample shows how the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.pullView"}},[e._v("pullView")]),e._v(" property could be\nutilized along with the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.pull"}},[e._v("pull")]),e._v(" and "),i("type-link",{attrs:{type:"Titanium.UI.ListView.pullend"}},[e._v("pullend")]),e._v(" events to\ncreate a refresh control.")],1),e._v(" "),i("pre",[i("code",[e._v("var win = Ti.UI.createWindow({backgroundColor: 'white'});\nvar listView = Ti.UI.createListView({height:'90%', top:0});\nvar sections = [];\n\nvar fruitSection = Ti.UI.createListSection({ headerTitle: 'Fruits'});\nvar fruitDataSet = [\n    {properties: { title: 'Apple'}},\n    {properties: { title: 'Banana'}},\n];\nfruitSection.setItems(fruitDataSet);\nsections.push(fruitSection);\n\nvar vegSection = Ti.UI.createListSection({ headerTitle: 'Vegetables'});\nvar vegDataSet = [\n    {properties: { title: 'Carrots'}},\n    {properties: { title: 'Potatoes'}},\n];\nvegSection.setItems(vegDataSet);\n\nvar fishSection = Ti.UI.createListSection({ headerTitle: 'Fish'});\nvar fishDataSet = [\n    {properties: { title: 'Cod'}},\n    {properties: { title: 'Haddock'}},\n];\nfishSection.setItems(fishDataSet);\nlistView.sections = sections;\nvar refreshCount = 0;\n\nfunction getFormattedDate(){\n    var date = new Date();\n    return date.getMonth() + '/' + date.getDate() + '/' + date.getFullYear() + ' ' + date.getHours() + ':' + date.getMinutes();\n}\n\nfunction resetPullHeader(){\n    actInd.hide();\n    imageArrow.transform=Ti.UI.create2DMatrix();\n    if (refreshCount < 2) {\n        imageArrow.show();\n        labelStatus.text = 'Pull down to refresh...';\n        labelLastUpdated.text = 'Last Updated: ' + getFormattedDate();\n    } else {\n        labelStatus.text = 'Nothing To Refresh';\n        labelLastUpdated.text = 'Last Updated: ' + getFormattedDate();\n        listView.removeEventListener('pull', pullListener);\n        listView.removeEventListener('pullend', pullendListener);\n        eventStatus.text = 'Removed event listeners.';\n    }\n    listView.setContentInsets({top:0}, {animated:true});\n}\n\nfunction loadTableData()\n{\n    if (refreshCount == 0) {\n        listView.appendSection(vegSection);\n    } else if (refreshCount == 1) {\n        listView.appendSection(fishSection);\n    } \n    refreshCount ++;\n    resetPullHeader();\n}\n\nfunction pullListener(e){\n    eventStatus.text = 'EVENT pull FIRED. e.active = '+e.active;\n    if (e.active == false) {\n        var unrotate = Ti.UI.create2DMatrix();\n        imageArrow.animate({transform:unrotate, duration:180});\n        labelStatus.text = 'Pull down to refresh...';\n    } else {\n        var rotate = Ti.UI.create2DMatrix().rotate(180);\n        imageArrow.animate({transform:rotate, duration:180});\n        if (refreshCount == 0) {\n            labelStatus.text = 'Release to get Vegetables...';\n        } else {\n            labelStatus.text = 'Release to get Fish...';\n        }\n    }\n}\n\nfunction pullendListener(e){\n    eventStatus.text = 'EVENT pullend FIRED.';\n \n    if (refreshCount == 0) {\n        labelStatus.text = 'Loading Vegetables...';        \n    } else {\n        labelStatus.text = 'Loading Fish...';\n    }\n    imageArrow.hide();\n    actInd.show();\n    listView.setContentInsets({top:80}, {animated:true});\n    setTimeout(function(){\n        loadTableData();\n    }, 2000);\n}\n\nvar tableHeader = Ti.UI.createView({\n    backgroundColor:'#e2e7ed',\n    width:320, height:80\n});\n\nvar border = Ti.UI.createView({\n    backgroundColor:'#576c89',\n    bottom:0,\n    height:2\n});\ntableHeader.add(border);\n\nvar imageArrow = Ti.UI.createImageView({\n    image:'arrow.png',\n    left:20, bottom:10,\n    width:23, height:60\n});\ntableHeader.add(imageArrow);\n\nvar labelStatus = Ti.UI.createLabel({\n    color:'#576c89',\n    font:{fontSize:13, fontWeight:'bold'},\n    text:'Pull down to refresh...',\n    textAlign:'center',\n    left:55, bottom:30,\n    width:200\n});\ntableHeader.add(labelStatus);\n\nvar labelLastUpdated = Ti.UI.createLabel({\n    color:'#576c89',\n    font:{fontSize:12},\n    text:'Last Updated: ' + getFormattedDate(),\n    textAlign:'center',\n    left:55, bottom:15,\n    width:200\n});\ntableHeader.add(labelLastUpdated);\n\nvar actInd = Ti.UI.createActivityIndicator({\n    left:20, bottom:13,\n    width:30, height:30\n});\ntableHeader.add(actInd);\nlistView.pullView = tableHeader;\nlistView.addEventListener('pull', pullListener);\nlistView.addEventListener('pullend',pullendListener);\n\nvar eventStatus = Ti.UI.createLabel({\n    font:{fontSize:13, fontWeight:'bold'},\n    text: 'Event data will show here',\n    bottom:0,\n    height:'10%'\n})\n\nwin.add(listView);\nwin.add(eventStatus);\nwin.open();\n")])]),e._v(" "),i("h3",{attrs:{id:"alloy-xml-markup"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#alloy-xml-markup","aria-hidden":"true"}},[e._v("#")]),e._v(" Alloy XML Markup")]),e._v(" "),i("p",[e._v("'List View with Custom Item Template' as an Alloy view.  List view markup is supported in\nAlloy 1.2.0 and later.")]),e._v(" "),i("p",[i("code",[e._v("app/views/index.xml")]),e._v(":")]),e._v(" "),i("pre",[i("code",[e._v('<Alloy>\n    <Window backgroundColor="white">\n        <ListView id="listView" defaultItemTemplate="template">\n\n            \x3c!-- The Templates tag sets the ListView\'s templates property --\x3e\n\n            <Templates>\n\n                \x3c!-- Define your item templates within the Templates tags or use the\n                     Require tag to include a view that only contains an ItemTemplate --\x3e\n\n                <ItemTemplate name="template">\n                    <ImageView bindId="pic" id="icon" />\n                    <Label bindId="info" id="title" />\n                    <Label bindId="es_info" id="subtitle" />\n                </ItemTemplate>\n\n            </Templates>\n\n            <ListSection headerTitle="Fruit / Frutas">\n\n                \x3c!-- You can specify any ListItem or ListDataItem properties in ListItem --\x3e\n\n                \x3c!-- Specify data to bind to the item template with inline attributes\n                     defined as <bindId>:<Ti.UI.Component.property> --\x3e\n\n                <ListItem info:text="Apple" es_info:text="Manzana" pic:image="/apple.png" />\n                <ListItem info:text="Banana" es_info:text="Banana" pic:image="/banana.png" />\n            </ListSection>\n            <ListSection headerTitle="Vegetables / Verduras">\n                <ListItem info:text="Carrot" es_info:text="Zanahoria" pic:image="/carrot.png" />\n                <ListItem info:text="Potato" es_info:text="Patata" pic:image="/potato.png" />\n            </ListSection>\n            <ListSection headerTitle="Grains / Granos">\n                <ListItem info:text="Corn" es_info:text="Maiz" pic:image="/corn.png" />\n                <ListItem info:text="Rice" es_info:text="Arroz" pic:image="/rice.png" />\n            </ListSection>\n        </ListView>\n    </Window>\n</Alloy>\n')])]),e._v(" "),i("p",[i("code",[e._v("app/styles/index.tss")]),e._v(":")]),e._v(" "),i("pre",[i("code",[e._v("\"#icon\" : {\n    width: '50dp', height: '50dp', left: 0\n},\n\"#title\" : {\n    color: 'black',\n    font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },\n    left: '60dp', top: 0\n},\n\"#subtitle\" : {\n    color: 'gray',\n    font: { fontFamily:'Arial', fontSize: '14dp' },\n    left: '60dp', top: '25dp'\n}\n")])]),e._v(" "),i("h3",{attrs:{id:"alloy-example-of-listview-properties"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#alloy-example-of-listview-properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Alloy example of ListView properties")]),e._v(" "),i("p",[e._v("Supported in Alloy 1.3.0 and later.")]),e._v(" "),i("p",[e._v("In Alloy, ListView's "),i("code",[e._v("searchView")]),e._v(", "),i("code",[e._v("headerView")]),e._v(", "),i("code",[e._v("footerView")]),e._v(", and "),i("code",[e._v("pullView")]),e._v("\nproperties may be declared as XML elements inline with the "),i("code",[e._v("ListView")]),e._v(" element.  The example\nbelow demonstrates how to use "),i("code",[e._v("searchView")]),e._v(", "),i("code",[e._v("headerView")]),e._v(" and "),i("code",[e._v("footerView")]),e._v(".")]),e._v(" "),i("pre",[i("code",[e._v('<Alloy>\n    <Window fullscreen="true">\n        <ListView>\n            \x3c!-- Sets ListView\'s searchView property.\n                 For Android, you can also do <SearchView platform="android" />\n                 to use a Ti.UI.Android.SearchView instead of a search bar. --\x3e\n            <SearchBar barColor="#000" />\n\n            \x3c!-- Sets ListView\'s headerView property --\x3e\n            <HeaderView>\n                <View backgroundColor="#DDD" height="Ti.UI.SIZE">\n                    <Label>Header View</Label>\n                </View>>\n            </HeaderView>\n\n            <ListSection>\n                <ListItem title="Papaya" searchableText="Papaya"/>\n                <ListItem title="Peach" searchableText="Peach"/>\n                <ListItem title="Pear" searchableText="Pear"/>\n                <ListItem title="Persimmon" searchableText="Persimmon"/>\n                <ListItem title="Pineapple" searchableText="Pineapple"/>\n                <ListItem title="Pluot" searchableText="Pluto"/>\n                <ListItem title="Pomegranate" searchableText="Pomegranate"/>\n            </ListSection>\n\n            \x3c!-- Sets ListView\'s footerView property --\x3e\n            <FooterView>\n                <View backgroundColor="#DDD" height="Ti.UI.SIZE">\n                    <Label>Footer View</Label>\n                </View>\n            </FooterView>\n        </ListView>\n    </Window>\n</Alloy>\n')])]),e._v(" "),i("h3",{attrs:{id:"alloy-example-of-element"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#alloy-example-of-element","aria-hidden":"true"}},[e._v("#")]),e._v(" Alloy example of "),i("PullView",[e._v(" element")])],1),e._v(" "),i("p",[e._v("The example below demonstrates how to use a "),i("code",[e._v("<PullView>")]),e._v(" Alloy element.")]),e._v(" "),i("pre",[i("code",[e._v('\x3c!-- views/index.xml --\x3e\n<Alloy>\n    <Window class="container" >\n        <ListView id="list">\n            <ListSection>\n                <ListItem title="Number 1"></ListItem>\n                <ListItem title="Number 2"></ListItem>\n            </ListSection>\n            <PullView>\n                <View backgroundColor="red" height="50">\n                    <Label>Release to reload</Label>\n                </View>\n            </PullView>\n        </ListView>\n    </Window>\n</Alloy>\n')])]),e._v(" "),i("ApiDocs")],1)},[],!1,null,null,null);a.options.__file="listview.md";t.default=a.exports}}]);