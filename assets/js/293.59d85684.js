(window.webpackJsonp=window.webpackJsonp||[]).push([[293],{654:function(e,t,a){"use strict";a.r(t);var r=a(14),i=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"titanium-iostream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titanium-iostream","aria-hidden":"true"}},[e._v("#")]),e._v(" Titanium.IOStream")]),e._v(" "),a("ProxySummary"),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("See the "),a("type-link",{attrs:{type:"Titanium.Stream"}},[e._v("Titanium.Stream")]),e._v(" module for related utility methods that support asynchronous\nI/O.")],1),e._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("h3",{attrs:{id:"write-data-to-a-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#write-data-to-a-stream","aria-hidden":"true"}},[e._v("#")]),e._v(" Write Data to a Stream")]),e._v(" "),a("p",[e._v("This example demonstrates writing data to a stream.")]),e._v(" "),a("pre",[a("code",[e._v('var outBuffer = Ti.createBuffer({data: "write me"});\n// stream object could be socket, file, buffer or blob\nvar outStream = Ti.Stream.createStream({mode: Ti.Stream.MODE_WRITE});\n\nvar bytesWritten = outStream.write(outBuffer);  // writes entire buffer to stream\nTi.API.info("Bytes written:" + bytesWritten);  // should be 8\n\nbytesWritten = outStream.write(outBuffer, 2, 5);  // only writes "ite m" to stream\nTi.API.info("Bytes written:" + bytesWritten);  // should be 5\n')])]),e._v(" "),a("h3",{attrs:{id:"read-data-from-a-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-data-from-a-stream","aria-hidden":"true"}},[e._v("#")]),e._v(" Read Data From a Stream")]),e._v(" "),a("p",[e._v("This shows a simple example of reading data from a stream, one buffer full at a\ntime.")]),e._v(" "),a("pre",[a("code",[e._v('var size = 0;\n// read data one buffer full at a time\nwhile ((size = instream.read(buffer)) > -1) {\n    // do something with the data here ...\n    Ti.API.info("Read " + size + " bytes.");\n}\n')])]),e._v(" "),a("h3",{attrs:{id:"read-data-with-offset-and-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-data-with-offset-and-length","aria-hidden":"true"}},[e._v("#")]),e._v(" Read Data With Offset and Length")]),e._v(" "),a("p",[e._v("This example shows how to read data from a stream into a buffer. We assume that\nthe "),a("code",[e._v("inStream")]),e._v(' variable holds a previously initialized stream that contains the\nstring, "World Titanium".')]),e._v(" "),a("pre",[a("code",[e._v('var inBuffer = Ti.createBuffer({ value: "Hello [           ]" });\n\n// Read the first 6 bytes from the stream to the buffer, starting at position 10.\nvar bytesRead = inStream.read(inBuffer, 10, 6);\n\nTi.API.info("Bytes read: " + bytesRead);\nTi.API.info(inBuffer.toString());\n\n// Read the next 8  bytes from the stream to the buffer, starting at position 8.\nbytesRead = inStream.read(inBuffer, 8, 8);\n\nTi.API.info("Bytes read: " + bytesRead);\nTi.API.info(inBuffer.toString());\n')])]),e._v(" "),a("p",[e._v("The second "),a("code",[e._v("read")]),e._v(" overwrites the data from the first "),a("code",[e._v("read")]),e._v(", so the output looks\nlike this:")]),e._v(" "),a("pre",[a("code",[e._v("[INFO] Bytes read: 6\n[INFO] Hello [   World   ]\n[INFO] Bytes read: 8\n[INFO] Hello [ Titanium  ]\n")])]),e._v(" "),a("ApiDocs")],1)},[],!1,null,null,null);i.options.__file="iostream.md";t.default=i.exports}}]);