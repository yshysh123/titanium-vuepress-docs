(window.webpackJsonp=window.webpackJsonp||[]).push([[271],{258:function(e,n,a){"use strict";a.r(n);var t=a(14),r=Object(t.a)({},function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"titanium-calendar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titanium-calendar","aria-hidden":"true"}},[e._v("#")]),e._v(" Titanium.Calendar")]),e._v(" "),a("ProxySummary"),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("This module supports retrieving information about existing events and creating new events.\nModifying or deleting existing events and creating recurring events are only supported on iOS.")]),e._v(" "),a("p",[e._v("Currently, on Android, calendar permissions must be explicitly configured in "),a("code",[e._v("tiapp.xml")]),e._v(' in order to access the\ncalendar. See "Common Requirements" in\n'),a("a",{attrs:{href:"https://docs.appcelerator.com/platform/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference",target:"_blank",rel:"noopener noreferrer"}},[e._v("tiapp.xml and timodule.xml Reference"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("h3",{attrs:{id:"all-calendars-vs-selectable-calendars"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-calendars-vs-selectable-calendars","aria-hidden":"true"}},[e._v("#")]),e._v(" All Calendars vs Selectable Calendars")]),e._v(" "),a("p",[e._v("Print the names of all calendars, and the names of calendars that\nhave been selected in the native Android calendar application.")]),e._v(" "),a("pre",[a("code",[e._v("function showCalendars(calendars) {\n    for (var i = 0; i < calendars.length; i++) {\n        Ti.API.info(calendars[i].name);\n    }\n}\n\nTi.API.info('ALL CALENDARS:');\nshowCalendars(Ti.Calendar.allCalendars);\nif (Ti.Platform.osname === 'android') {\n    Ti.API.info('SELECTABLE CALENDARS:');\n    showCalendars(Ti.Calendar.selectableCalendars);\n}\n")])]),e._v(" "),a("h3",{attrs:{id:"create-an-event-and-reminder-on-android"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-an-event-and-reminder-on-android","aria-hidden":"true"}},[e._v("#")]),e._v(" Create an Event and Reminder on Android")]),e._v(" "),a("p",[e._v("Creates an event and adds an e-mail reminder for 10 minutes before the event.")]),e._v(" "),a("pre",[a("code",[e._v("var CALENDAR_TO_USE = 3;\nvar calendar = Ti.Calendar.getCalendarById(CALENDAR_TO_USE);\n\n// Create the event\nvar eventBegins = new Date(2010, 11, 26, 12, 0, 0);\nvar eventEnds = new Date(2010, 11, 26, 14, 0, 0);\nvar details = {\n    title: 'Do some stuff',\n    description: \"I'm going to do some stuff at this time.\",\n    begin: eventBegins,\n    end: eventEnds\n};\n\nvar event = calendar.createEvent(details);\n\n// Now add a reminder via e-mail for 10 minutes before the event.\nvar reminderDetails = {\n    minutes: 10,\n    method: Ti.Calendar.METHOD_EMAIL\n};\n\nevent.createReminder(reminderDetails);\n")])]),e._v(" "),a("h3",{attrs:{id:"events-in-a-year"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#events-in-a-year","aria-hidden":"true"}},[e._v("#")]),e._v(" Events in a year")]),e._v(" "),a("p",[e._v("Create a picker to allow an existing calendar to be selected and, when a button is clicked,\ngenerate details of all events in that calendar for the current year .")]),e._v(" "),a("pre",[a("code",[e._v("var calendars = [];\nvar selectedCalendarName;\nvar selectedid;\nvar pickerData = [];\nvar osname = Ti.Platform.osname;\n\n//**read events from calendar*******\nfunction performCalendarReadFunctions(){\n    var scrollView = Ti.UI.createScrollView({\n      backgroundColor: '#eee',\n      height: 500,\n      top: 20\n    });\n\n    var label = Ti.UI.createLabel({\n      backgroundColor: 'white',\n      text: 'Click on the button to display the events for the selected calendar',\n      textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER,\n      top: 20\n    });\n    scrollView.add(label);\n\n    var selectableCalendars = Ti.Calendar.allCalendars;\n    for (var i = 0, ilen = selectableCalendars.length; i < ilen; i++) {\n      calendars.push({ name: selectableCalendars[i].name, id: selectableCalendars[i].id });\n      pickerData.push( Ti.UI.createPickerRow({ title: calendars[i].name }) );\n      if(i === 0){\n        selectedCalendarName = selectableCalendars[i].name;\n        selectedid = selectableCalendars[i].id;\n      }\n    }\n    \n    if(!calendars.length){\n      label.text = 'No calendars available. Select at least one in the native calendar before using this app';\n    } else {\n      label.text = 'Click button to view calendar events';\n      \n      var picker = Ti.UI.createPicker({\n        top:20\n      });\n      \n      picker.add(pickerData);\n      win.add(picker);\n      \n      picker.addEventListener('change', function(e){\n        for (var i = 0, ilen = calendars.length; i < ilen; i++) {\n          if(calendars[i].name === e.row.title){\n            selectedCalendarName = calendars[i].name;\n            selectedid = calendars[i].id;\n            Ti.API.info('Selected calendar that we are going to fetch is :: '+ selectedid + ' name:' + selectedCalendarName);\n          }\n        }\n      });\n      \n      var button = Ti.UI.createButton({\n        title: 'View events',\n        top: 20\n      });\n      win.add(button);\n      \n      button.addEventListener('click', function(e){\n        label.text = 'Generating...';\n        \n        var currentYear = new Date().getFullYear();\n        \n        var consoleString = '';\n        \n        function print(s) {\n          if (consoleString.length) {\n            consoleString = consoleString + '\\n';\n          }\n          consoleString = consoleString + s;\n        }\n        \n        var calendar = Ti.Calendar.getCalendarById(selectedid);\n        Ti.API.info('Calendar was of type' + calendar);\n        Ti.API.info('calendar that we are going to fetch is :: '+ calendar.id + ' name:' + calendar.name);\n        \n        function printReminder(r) {\n            if (osname === 'android') {\n                var typetext = '[method unknown]';\n                if (r.method == Ti.Calendar.METHOD_EMAIL) {\n                    typetext = 'Email';\n                } else if (r.method == Ti.Calendar.METHOD_SMS) {\n                    typetext = 'SMS';\n                } else if (r.method == Ti.Calendar.METHOD_ALERT) {\n                    typetext = 'Alert';\n                } else if (r.method == Ti.Calendar.METHOD_DEFAULT) {\n                    typetext = '[default reminder method]';\n                }\n                print(typetext + ' reminder to be sent ' + r.minutes + ' minutes before the event');\n            }\n        }\n        \n        function printAlert(a) {\n            if (osname === 'android') {\n                  print('Alert id ' + a.id + ' begin ' + a.begin + '; end ' + a.end + '; alarmTime ' + a.alarmTime + '; minutes ' + a.minutes);\n            } else if (osname === 'iphone' || osname === 'ipad') {\n                print('Alert absoluteDate ' + a.absoluteDate + ' relativeOffset ' + a.relativeOffset);\n            }\n        }\n        \n        function printEvent(event) {\n          if (event.allDay) {\n            print('Event: ' + event.title + '; ' + event.begin + ' (all day)');\n          } else {\n            print('Event: ' + event.title + '; ' + event.begin + ' ' + event.begin+ '-' + event.end);\n          }\n          \n          var reminders = event.reminders;\n          if (reminders && reminders.length) {\n              print('There is/are ' + reminders.length + ' reminder(s)');\n              for (var i = 0; i < reminders.length; i++) {\n                  printReminder(reminders[i]);\n              }\n          }\n          print('hasAlarm? ' + event.hasAlarm);\n          var alerts = event.alerts;\n          if (alerts && alerts.length) {\n            for (var i = 0; i < alerts.length; i++) {\n              printAlert(alerts[i]);\n            }\n          }\n          \n          var status = event.status;\n          if (status == Ti.Calendar.STATUS_TENTATIVE) {\n            print('This event is tentative');\n          }\n          if (status == Ti.Calendar.STATUS_CONFIRMED) {\n            print('This event is confirmed');\n          }\n          if (status == Ti.Calendar.STATUS_CANCELED) {\n            print('This event was canceled');\n          }\n        }\n        \n        var events = calendar.getEventsInYear(currentYear);\n        if (events && events.length) {\n          print(events.length + ' event(s) in ' + currentYear);\n          print('');\n          for (var i = 0; i < events.length; i++) {\n            printEvent(events[i]);\n            print('');\n          }\n        } else {\n          print('No events');\n        }\n        \n        label.text = consoleString;\n      });\n    }\n\n    win.add(scrollView);\n}\n\n\nvar win = Ti.UI.createWindow({\n  backgroundColor: 'white',\n  exitOnClose: true,\n  fullscreen: false,\n  layout: 'vertical',\n  title: 'Calendar Demo'\n});\n\nif (Ti.Calendar.hasCalendarPermissions()) {\n    performCalendarReadFunctions();\n} else {\n    Ti.Calendar.requestCalendarPermissions(function(e) {\n        if (e.success) {\n            performCalendarReadFunctions();\n        } else {\n            Ti.API.error(e.error);\n            alert('Access to calendar is not allowed');\n        }\n    });\n}\n\nwin.open();\n")])]),e._v(" "),a("h3",{attrs:{id:"create-a-recurring-event-with-alerts-on-ios"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-recurring-event-with-alerts-on-ios","aria-hidden":"true"}},[e._v("#")]),e._v(" Create a Recurring Event with Alerts on iOS")]),e._v(" "),a("p",[e._v("Create a recurring event with alerts.")]),e._v(" "),a("pre",[a("code",[e._v("function printEventDetails(eventID) {\n    Ti.API.info('eventID:' + eventID);\n    var defCalendar = Ti.Calendar.defaultCalendar;\n    var eventFromCalendar = defCalendar.getEventById(eventID);\n    if (eventFromCalendar != null) {\n        Ti.API.info('Printing event values ::');\n        Ti.API.info('title : '+ eventFromCalendar.title);\n        Ti.API.info('notes : ' + eventFromCalendar.notes);\n        Ti.API.info('location:' + eventFromCalendar.location);\n        Ti.API.info('allDay ? :' + eventFromCalendar.allDay);\n        Ti.API.info('status : '+ eventFromCalendar.status);\n        Ti.API.info('availability : '+ eventFromCalendar.availability);\n        Ti.API.info('hasAlarm ? : '+ eventFromCalendar.hasAlarm);\n        Ti.API.info('id : '+ eventFromCalendar.id);\n        Ti.API.info('isDetached ? : '+ eventFromCalendar.isDetached);\n        Ti.API.info('begin : '+ eventFromCalendar.begin);\n        Ti.API.info('end : '+ eventFromCalendar.end);\n        var eventRule = eventFromCalendar.recurrenceRules;\n        Ti.API.info(\"recurrenceRules : \" + eventRule);\n        for (var i = 0; i < eventRule.length; i++) {\n            Ti.API.info(\"Rule # \"+ i);\n            Ti.API.info('frequency : ' + eventRule[i].frequency);\n            Ti.API.info('interval : ' + eventRule[i].interval);\n            Ti.API.info('daysofTheWeek : ' );\n            var daysofTheWeek = eventRule[i].daysOfTheWeek; \n            for (var j = 0; j < daysofTheWeek.length; j++) {\n                Ti.API.info('{ dayOfWeek : '+ daysofTheWeek[j].dayOfWeek +'weekNumber : '+daysofTheWeek[j].week +'}, ');\n            }\n            Ti.API.info('firstDayOfTheWeek : ' + eventRule[i].firstDayOfTheWeek);\n            Ti.API.info('daysOfTheMonth : ');\n            var daysOfTheMonth = eventRule[i].daysOfTheMonth;\n            for(var j=0;j<daysOfTheMonth.length;j++) {\n                Ti.API.info(' ' + daysOfTheMonth[j]);\n            }\n            Ti.API.info('daysOfTheYear : ');\n            var daysOfTheYear = eventRule[i].daysOfTheYear;\n            for(var j=0;i<daysOfTheYear.length;j++) {\n                Ti.API.info(' ' + daysOfTheYear[j]);\n            }\n            Ti.API.info('weeksOfTheYear : ');\n            var weeksOfTheYear = eventRule[i].weeksOfTheYear;\n            for(var j=0;j<weeksOfTheYear.length;j++) {\n                Ti.API.info(' ' + weeksOfTheYear[j]);\n            }\n            Ti.API.info('monthsOfTheYear : ');\n            var monthsOfTheYear = eventRule[i].monthsOfTheYear;\n            for(var j=0;j<monthsOfTheYear.length;j++) {\n                Ti.API.info(' ' + monthsOfTheYear[j]);\n            }\n            Ti.API.info('daysOfTheYear : ');\n            var setPositions = eventRule[i].setPositions;\n            for(var j=0;j<setPositions.length;j++) {\n                Ti.API.info(' ' + setPositions[j]);\n            }\n        };\n        Ti.API.info('alerts : '+ eventFromCalendar.alerts);\n        var newAlerts = eventFromCalendar.alerts;\n        \n        for(var i=0 ; i < newAlerts.length ; i++) {\n            Ti.API.info('*****ALert '+ i);\n            Ti.API.info('absoluteDate :'+ newAlerts[i].absoluteDate);\n            Ti.API.info('relativeOffset ;' + newAlerts[i].relativeOffset);\n        }\n   }\n}\nfunction performCalendarWriteFunctions(){\n    var defCalendar = Ti.Calendar.defaultCalendar;\n    var date1 = new Date(new Date().getTime() + 3000),\n        date2 = new Date(new Date().getTime() + 900000);\n    Ti.API.info('Date1 : '+ date1 + 'Date2 : '+ date2);\n    var event1 = defCalendar.createEvent({\n                        title: 'Sample Event',\n                        notes: 'This is a test event which has some values assigned to it.',\n                        location: 'Appcelerator Inc',\n                        begin: date1,\n                        end: date2,\n                        availability: Ti.Calendar.AVAILABILITY_FREE,\n                        allDay: false,\n                });\n    var alert1 = event1.createAlert({\n                        absoluteDate: new Date(new Date().getTime() - (1000*60*20))\n                });\n    var alert2 = event1.createAlert({\n        relativeOffset:-(60*15)\n    })\n    var allAlerts = new Array(alert1,alert2);\n    event1.alerts = allAlerts;\n    var newRule = event1.createRecurrenceRule({\n                        frequency: Ti.Calendar.RECURRENCEFREQUENCY_MONTHLY,\n                        interval: 1,\n                        daysOfTheWeek: [{dayOfWeek:1,week:2},{dayOfWeek:2}],\n                        end: {occurrenceCount:10}\n                });\n    Ti.API.info('newRule : '+ newRule);\n    event1.recurrenceRules = [newRule];\n    Ti.API.info('Going to save event now');\n    event1.save(Ti.Calendar.SPAN_THISEVENT);\n    Ti.API.info('Done with saving event,\\n Now trying to retreive it.');\n    printEventDetails(event1.id);\n}\nvar win = Ti.UI.createWindow({\n                        backgroundColor: 'white',\n                        title: 'Calendar Demo'\n            });\n\nvar label = Ti.UI.createLabel({\n                        text: 'Check console log',\n                        height: Ti.UI.size,\n                        width: Ti.UI.size\n            });\nwin.add(label);\n\nif (Ti.Calendar.hasCalendarPermissions()) {\n    performCalendarReadFunctions();\n} else {\n    Ti.Calendar.requestCalendarPermissions(function(e) {\n        if (e.success) {\n            performCalendarReadFunctions();\n        } else {\n            alert('Access to calendar is not allowed');\n        }\n    });\n}\n\nwin.open();\n")])]),e._v(" "),a("ApiDocs")],1)},[],!1,null,null,null);r.options.__file="calendar.md";n.default=r.exports}}]);