(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{552:function(n,t,a){"use strict";a.r(t);var i=a(14),e=Object(i.a)({},function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"titanium-ui-animation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#titanium-ui-animation","aria-hidden":"true"}},[n._v("#")]),n._v(" Titanium.UI.Animation")]),n._v(" "),a("ProxySummary"),n._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[n._v("#")]),n._v(" Overview")]),n._v(" "),a("p",[n._v("An animation object describes the properties of an animation. At its most basic, an animation\nobject represents a single-phase animation with an end state and a duration.")]),n._v(" "),a("p",[n._v("When "),a("type-link",{attrs:{type:"Titanium.UI.View.animate"}},[n._v("animate")]),n._v(" is called on a "),a("type-link",{attrs:{type:"Titanium.UI.View"}},[n._v("View")]),n._v(", the view is\nanimated from its current state to the state described by the animation object. The properties\nthat can be animated include the view's position, size, colors, transformation matrix and opacity.")],1),n._v(" "),a("p",[n._v("Animations can be set to reverse themselves automatically on completion, and to repeat a given\nnumber of times. For more complicated effects, multiple animations can be combined in sequence,\nstarting one animation when the previous animation completes.")]),n._v(" "),a("p",[n._v("Use the "),a("type-link",{attrs:{type:"Titanium.UI.createAnimation"}},[n._v("Titanium.UI.createAnimation")]),n._v(" method to create an animation object.")],1),n._v(" "),a("p",[n._v("Note that when you animate a view's size or position, the actual layout properties (such as\n"),a("code",[n._v("top")]),n._v(", "),a("code",[n._v("left")]),n._v(", "),a("code",[n._v("width")]),n._v(", "),a("code",[n._v("height")]),n._v(") are not changed by the animation. See the description of the\n"),a("type-link",{attrs:{type:"Titanium.UI.View.animate"}},[n._v("animate")]),n._v(" method for more information.")],1),n._v(" "),a("h3",{attrs:{id:"ios-platform-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ios-platform-notes","aria-hidden":"true"}},[n._v("#")]),n._v(" iOS Platform Notes")]),n._v(" "),a("p",[n._v("iOS supports both 2D and 3D matrix transformations in animations.")]),n._v(" "),a("p",[n._v("In iOS, you can also specify an animation curve or "),a("em",[n._v("easing function")]),n._v(" to control the pace of the\nanimation. To use an easing function, set the animation's "),a("code",[n._v("curve")]),n._v(" property to one of the\n"),a("code",[n._v("ANIMATION_CURVE")]),n._v(" constants defined in "),a("type-link",{attrs:{type:"Titanium.UI"}},[n._v("Titanium.UI")]),n._v(". For example,\n"),a("type-link",{attrs:{type:"Titanium.UI.ANIMATION_CURVE_EASE_IN"}},[n._v("ANIMATION_CURVE_EASE_IN")]),n._v(" specifies an animation that\nstarts slowly and then speeds up.")],1),n._v(" "),a("p",[n._v("Finally, iOS also supports "),a("em",[n._v("transitions")]),n._v(" between windows or views. You can create a transition\nby creating an animation object and setting the "),a("code",[n._v("view")]),n._v(" property to the view you want to\ntransition to. The "),a("code",[n._v("transition")]),n._v(" property specifies the transition effect to apply. Use one of\nthe transition style constants defined in "),a("type-link",{attrs:{type:"Titanium.UI.iOS.AnimationStyle"}},[n._v("Titanium.UI.iOS.AnimationStyle")]),n._v(".")],1),n._v(" "),a("h3",{attrs:{id:"android-platform-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android-platform-notes","aria-hidden":"true"}},[n._v("#")]),n._v(" Android Platform Notes")]),n._v(" "),a("p",[n._v("Android supports 2D matrix transformations. Note that the\n"),a("type-link",{attrs:{type:"Titanium.UI.2DMatrix.rotate"}},[n._v("2DMatrix.rotate")]),n._v(' method operates differently on Android. Called\nwith a single argument, it rotates from zero to the specified angle. That is, it ignores any\nexisting rotation. Called with two arguments, it interprets the first argument as a "from"\nangle and the second argument as a "to" angle.')],1),n._v(" "),a("p",[n._v("Android doesn't support any animation curves or easing functions. Animations always interpolate\nlinearly between the start state and the end state.")]),n._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[n._v("#")]),n._v(" Examples")]),n._v(" "),a("h3",{attrs:{id:"simple-animation-applied-to-a-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-animation-applied-to-a-view","aria-hidden":"true"}},[n._v("#")]),n._v(" Simple Animation Applied to a View")]),n._v(" "),a("p",[n._v("Create a simple animation and apply it to the view.  In this example, the view will animate\nfrom red to black to orange over 2 seconds.")]),n._v(" "),a("pre",[a("code",[n._v("var view = Titanium.UI.createView({\n  backgroundColor:'red'\n});\nvar animation = Titanium.UI.createAnimation();\nanimation.backgroundColor = 'black';\nanimation.duration = 1000;\nvar animationHandler = function() {\n  animation.removeEventListener('complete',animationHandler);\n  animation.backgroundColor = 'orange';\n  view.animate(animation);\n};\nanimation.addEventListener('complete',animationHandler);\nview.animate(animation);\n")])]),n._v(" "),a("h3",{attrs:{id:"animation-using-matrix-transforms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#animation-using-matrix-transforms","aria-hidden":"true"}},[n._v("#")]),n._v(" Animation Using Matrix Transforms")]),n._v(" "),a("p",[n._v("The following example uses a transformation matrix to animate\na view when the view is clicked. The animation rotates and scales\nthe view, then returns it to its original size and position. The\nentire animation is repeated three times.")]),n._v(" "),a("pre",[a("code",[n._v("var box = Ti.UI.createView({\n  backgroundColor : 'red',\n  height : '100',\n  width : '100'\n});\nwin.add(box);\n\nbox.addEventListener('click', function() {\n  var matrix = Ti.UI.create2DMatrix();\n  matrix = matrix.rotate(180);\n  matrix = matrix.scale(2, 2);\n  var a = Ti.UI.createAnimation({\n    transform : matrix,\n    duration : 2000,\n    autoreverse : true,\n    repeat : 3\n  });\n  box.animate(a);\n});\n\nwin.add(box);\n")])]),n._v(" "),a("h3",{attrs:{id:"using-an-anchorpoint-android-and-ios"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-an-anchorpoint-android-and-ios","aria-hidden":"true"}},[n._v("#")]),n._v(" Using an anchorPoint (Android and iOS)")]),n._v(" "),a("p",[n._v("Create a button and a blue square view. For each click of the button, apply a 90 degree\nrotation animation pivoted at one of a series of anchor points. In particular, note that\nan anchor point is configured using the "),a("type-link",{attrs:{type:"Titanium.UI.Animation.anchorPoint"}},[n._v("Titanium.UI.Animation.anchorPoint")]),n._v(" property for\nAndroid and the "),a("type-link",{attrs:{type:"Titanium.UI.View.anchorPoint"}},[n._v("Titanium.UI.View.anchorPoint")]),n._v(" property for iOS.")],1),n._v(" "),a("pre",[a("code",[n._v("var animationType = [\n  { name: 'Top Left', anchorPoint: {x:0, y:0} },\n  { name: 'Top Right', anchorPoint: {x:1, y:0} },\n  { name: 'Bottom Left', anchorPoint: {x:0, y:1} },\n  { name: 'Bottom Right', anchorPoint: {x:1, y:1} },\n  { name: 'Center', anchorPoint: {x:0.5, y:0.5} }\n];\nvar animationTypeLength = animationType.length;\nvar animationCount = 0;\nvar animationTypePointer = 0;\n\nvar t = Ti.UI.create2DMatrix();\nt = t.rotate(90);\n\n// animation properties\nvar a = {\n  transform: t,\n  duration: 2000,\n  autoreverse: true\n};\n\nTi.UI.backgroundColor = 'white';\nvar win = Ti.UI.createWindow();\n\nvar view = Ti.UI.createView({\n  backgroundColor:'#336699',\n  width:100, height:100\n});\nwin.add(view);\n\nvar button = Ti.UI.createButton({\n  title:'Animate ' + animationType[animationTypePointer].name,\n  height: (Ti.UI.Android) ? 80 : 40,\n  width: (Ti.UI.Android) ? 300 : 200,\n  top:30\n});\nwin.add(button);\n\nfunction updateButton(name){\n  button.title = 'Animate ' + name;\n}\n\nbutton.addEventListener('click', function(){\n  // set new anchorPoint on animation for Android\n  a.anchorPoint = animationType[animationTypePointer].anchorPoint;\n\n  // set new anchorPoint on view for iOS\n  view.anchorPoint = animationType[animationTypePointer].anchorPoint;\n\n  animationCount++;\n\n  // determine position of next object in animationType array or return to first item\n  // using modulus operator\n  animationTypePointer = animationCount % animationTypeLength;\n\n  // animate view, followed by callback to set next button title\n  view.animate(a, function(){\n    updateButton(animationType[animationTypePointer].name);\n  });\n});\n\nwin.open();\n")])]),n._v(" "),a("ApiDocs")],1)},[],!1,null,null,null);e.options.__file="animation.md";t.default=e.exports}}]);