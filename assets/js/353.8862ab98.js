(window.webpackJsonp=window.webpackJsonp||[]).push([[353],{483:function(t,a,i){"use strict";i.r(a);var e=i(14),n=Object(e.a)({},function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"titanium-ui-ios-gravitybehavior"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#titanium-ui-ios-gravitybehavior","aria-hidden":"true"}},[t._v("#")]),t._v(" Titanium.UI.iOS.GravityBehavior")]),t._v(" "),i("ProxySummary"),t._v(" "),i("h2",{attrs:{id:"overview"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),i("p",[t._v("A gravity behavior configures the gravity vector of one or more items. To define a gravity\nbehavior:")]),t._v(" "),i("ol",[i("li",[t._v("Use the "),i("type-link",{attrs:{type:"Titanium.UI.iOS.createGravityBehavior"}},[t._v("Titanium.UI.iOS.createGravityBehavior")]),t._v(" method to create and define the behavior.")],1),t._v(" "),i("li",[t._v("To define a gravity vector, either set the\n"),i("type-link",{attrs:{type:"Titanium.UI.iOS.GravityBehavior.angle"}},[t._v("angle")]),t._v(" and\n"),i("type-link",{attrs:{type:"Titanium.UI.iOS.GravityBehavior.magnitude"}},[t._v("magnitude")]),t._v(" properties, or set the\n"),i("type-link",{attrs:{type:"Titanium.UI.iOS.GravityBehavior.gravityDirection"}},[t._v("gravityDirection")]),t._v(" property.")],1),t._v(" "),i("li",[t._v("Use the "),i("type-link",{attrs:{type:"Titanium.UI.iOS.GravityBehavior.addItem"}},[t._v("addItem")]),t._v(" method to add items to the behavior.")],1),t._v(" "),i("li",[t._v("Add the behavior to an "),i("type-link",{attrs:{type:"Titanium.UI.iOS.Animator"}},[t._v("Animator object")]),t._v(".")],1)]),t._v(" "),i("p",[t._v("You can only define one gravity behavior per animator.")]),t._v(" "),i("h2",{attrs:{id:"examples"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),i("h3",{attrs:{id:"simple-example"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#simple-example","aria-hidden":"true"}},[t._v("#")]),t._v(" Simple Example")]),t._v(" "),i("p",[t._v("The following example creates many random blocks.  The initial gravitational force pulls the\nblocks downward. Clicking on the "),i("code",[t._v("Change")]),t._v(" button generates a new random gravity vector,\nwhich pulls the blocks in a random direction.")]),t._v(" "),i("img",{staticStyle:{border:"1px solid black"},attrs:{src:"images/animator/gravity.gif",height:"455"}}),t._v(" "),i("pre",[i("code",[t._v("var win = Ti.UI.createWindow({backgroundColor: 'white', fullscreen: true});\n\n// Create an Animator object using the window as the coordinate system\nvar animator = Ti.UI.iOS.createAnimator({referenceView: win});\n\n// Create a default collision behavior, using the window edges as boundaries\nvar collision = Ti.UI.iOS.createCollisionBehavior();\n\n// Simulate Earth's gravity\nvar gravity = Ti.UI.iOS.createGravityBehavior({\n    gravityDirection: {x: 0.0, y: 1.0}\n});\n\nvar WIDTH = Ti.Platform.displayCaps.platformWidth;\nvar HEIGHT = Ti.Platform.displayCaps.platformHeight;\n\n// Create a bunch of random blocks; add to the window and behaviors\nvar blocks = [];\nfor (var i = 0; i < 20; i++) {\n    var r = Math.round(Math.random() * 255);\n    var g = Math.round(Math.random() * 255);\n    var b = Math.round(Math.random() * 255);\n    var rgb = 'rgb(' + r +\",\" + g + \",\" + b + \")\";\n\n    blocks[i] = Ti.UI.createView({\n        width: 25,\n        height: 25,\n        top: Math.round(Math.random() * (HEIGHT - 25) + 25),\n        left: Math.round(Math.random() * (WIDTH - 25) + 25),\n        backgroundColor: rgb\n    });\n    win.add(blocks[i]);\n    collision.addItem(blocks[i]);\n    gravity.addItem(blocks[i]);\n}\n\nanimator.addBehavior(collision);\nanimator.addBehavior(gravity);\n           \n// Start the animation when the window opens\nwin.addEventListener('open', function(e){\n    animator.startAnimator();\n});\n\n// Change the gravity vector when the button is clicked\nvar button = Ti.UI.createButton({title: 'Change'});\nbutton.addEventListener('click', function(e){\n    gravity.gravityDirection = {\n        x: (1 - Math.random() * 2),\n        y: (1 - Math.random() * 2)\n    };\n    Ti.API.info('gravity vector: ' + JSON.stringify(gravity.gravityDirection));\n});\nwin.add(button);\nwin.open();\n")])]),t._v(" "),i("ApiDocs")],1)},[],!1,null,null,null);n.options.__file="gravitybehavior.md";a.default=n.exports}}]);