(window.webpackJsonp=window.webpackJsonp||[]).push([[384],{677:function(e,t,i){"use strict";i.r(t);var n=i(14),a=Object(n.a)({},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"titanium-ui-listitem"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#titanium-ui-listitem","aria-hidden":"true"}},[e._v("#")]),e._v(" Titanium.UI.ListItem")]),e._v(" "),i("ProxySummary"),e._v(" "),i("h2",{attrs:{id:"overview"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),i("p",[e._v("A list item is a combination of a "),i("type-link",{attrs:{type:"ListDataItem"}},[e._v("ListDataItem")]),e._v(" and "),i("type-link",{attrs:{type:"ItemTemplate"}},[e._v("ItemTemplate")]),e._v(".  The list data item\nrepresents the actual data, while the item template represents the style elements of the item.")],1),e._v(" "),i("p",[e._v("You should not create "),i("code",[e._v("ListItem")]),e._v(" objects with a JavaScript factory method, as you do other Titanium proxies.\nInstead, you should pass a "),i("type-link",{attrs:{type:"ListDataItem"}},[e._v("ListDataItem")]),e._v(" array to the "),i("code",[e._v("setItems")]),e._v(" method of a "),i("code",[e._v("ListSection")]),e._v(". The list data items\ncontain the data you want to display in the list.")],1),e._v(" "),i("p",[e._v("Alloy applications can use "),i("strong",[i("code",[e._v("<ListItem>")])]),e._v(" elements to create "),i("code",[e._v("ListItem")]),e._v(" objects. "),i("code",[e._v("<ListItem>")]),e._v(" elements\nmust be nested inside a "),i("strong",[i("code",[e._v("<ListSection>")])]),e._v(" element, which itself is nested in a "),i("code",[e._v("<ListView>")]),e._v(" element,\nas shown below:")]),e._v(" "),i("pre",[i("code",[e._v('<Alloy>\n    <ListView id="list">\n        <ListSection id="accounts">\n            <ListItem image="images/checking_account.png" title="Checking"/>\n            <ListItem image="images/saving_account.png" title="Savings"/>\n        </ListSection>\n    </ListView>\n</Alloy>\n')])]),e._v(" "),i("p",[e._v("By default, only the "),i("code",[e._v("title")]),e._v(", "),i("code",[e._v("image")]),e._v(" and "),i("code",[e._v("accessoryType")]),e._v(" keys of the list data item's\n"),i("code",[e._v("properties")]),e._v(' dictionary are displayed if an item template is not defined.  See "Default List Items"\nunder "Examples" section for an example of using the default template.')]),e._v(" "),i("h3",{attrs:{id:"item-templates"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#item-templates","aria-hidden":"true"}},[e._v("#")]),e._v(" Item Templates")]),e._v(" "),i("p",[e._v("To customize the style of a list item, use an item template to create your view structure.")]),e._v(" "),i("p",[e._v("Add key-value pairs of view properties and their values to the "),i("code",[e._v("properties")]),e._v(" dictionary of the\nitem template to set view properties of the list item.")]),e._v(" "),i("p",[i("strong",[e._v("Note:")]),e._v(" If possible, do not use "),i("code",[e._v("Ti.UI.SIZE")]),e._v(" or non-static dimensions to set the\ndimensions of view elements in list items.  Instead, try to use static dimensions. Scrolling in\nthe list view may be jerky if you use non-static dimensions.")]),e._v(" "),i("p",[e._v("Add key-value pairs of event names and their callback functions (or array of callback functions\nfor multiple callback bindings) to the "),i("code",[e._v("events")]),e._v(" dictionary of the  item template to bind callbacks\nto events, which are bubbled from the subcomponents of the item.")]),e._v(" "),i("p",[e._v("Add additional views, such as labels or image views, to the "),i("code",[e._v("childTemplates")]),e._v(" array of the item\ntemplate. The child templates are item templates with two extra properties:")]),e._v(" "),i("ul",[i("li",[e._v("Set the "),i("code",[e._v("type")]),e._v(" property to a Titanium view class, such as "),i("code",[e._v("Ti.UI.Label")]),e._v(" or "),i("code",[e._v("Ti.UI.ImageView")]),e._v(",\nto use that view in your template.")]),e._v(" "),i("li",[e._v("Set the "),i("code",[e._v("bindId")]),e._v(" to bind the template to a custom property in the list data item. The custom\nproperties in the list data item contain key-value pairs of view properties and their values.")])]),e._v(" "),i("p",[e._v("A list template supports the following view classes:")]),e._v(" "),i("ul",[i("li",[i("type-link",{attrs:{type:"Titanium.UI.ActivityIndicator"}},[e._v("Titanium.UI.ActivityIndicator")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.Button"}},[e._v("Titanium.UI.Button")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.ButtonBar"}},[e._v("Titanium.UI.ButtonBar")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.ImageView"}},[e._v("Titanium.UI.ImageView")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.Label"}},[e._v("Titanium.UI.Label")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.MaskedImage"}},[e._v("Titanium.UI.MaskedImage")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.ProgressBar"}},[e._v("Titanium.UI.ProgressBar")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.Picker"}},[e._v("Titanium.UI.Picker")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.ScrollableView"}},[e._v("Titanium.UI.ScrollableView")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.Slider"}},[e._v("Titanium.UI.Slider")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.Switch"}},[e._v("Titanium.UI.Switch")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.TextArea"}},[e._v("Titanium.UI.TextArea")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.TextField"}},[e._v("Titanium.UI.TextField")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.iOS.BlurView"}},[e._v("Titanium.UI.iOS.BlurView")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.iOS.LivePhotoView"}},[e._v("Titanium.UI.iOS.LivePhotoView")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.iOS.Stepper"}},[e._v("Titanium.UI.iOS.Stepper")])],1),e._v(" "),i("li",[i("type-link",{attrs:{type:"Titanium.UI.iOS.TabbedBar"}},[e._v("Titanium.UI.iOS.TabbedBar")])],1)]),e._v(" "),i("p",[e._v("For example, suppose you have a list data item defined as "),i("code",[e._v("{foo:{text: 'foobar'}}")]),e._v(" and an item\ntemplate defined as "),i("code",[e._v("{childTemplates: [{type: 'Ti.UI.Label', bindId: 'foo'}]}")]),e._v(".  The "),i("code",[e._v("foo")]),e._v("\nproperty in the list data item binds to the label in the template, which sets the "),i("code",[e._v("text")]),e._v("\nproperty of the label in the template to the "),i("code",[e._v("text")]),e._v(" property in the list data item.")]),e._v(" "),i("p",[e._v("To bind the list data item to an item template, use the "),i("type-link",{attrs:{type:"Titanium.UI.ListView.templates"}},[e._v("Titanium.UI.ListView.templates")]),e._v("\nproperty to map the template to a style name, then use the style name to either set the\n"),i("type-link",{attrs:{type:"Titanium.UI.ListView.defaultItemTemplate"}},[e._v("Titanium.UI.ListView.defaultItemTemplate")]),e._v(" property to globally set the style for all items or set the\n"),i("code",[e._v("template")]),e._v(" property of the list data item to override or individually set the style.")],1),e._v(" "),i("p",[e._v("On iOS, you can specify one of the template constants for the "),i("type-link",{attrs:{type:"ListDataItem.template"}},[e._v("ListDataItem.template")]),e._v(" property\nor "),i("type-link",{attrs:{type:"Titanium.UI.ListView.defaultItemTemplate"}},[e._v("Titanium.UI.ListView.defaultItemTemplate")]),e._v(" property: "),i("type-link",{attrs:{type:"Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS"}},[e._v("Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS")]),e._v(",\n"),i("type-link",{attrs:{type:"Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS"}},[e._v("Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS")]),e._v(" or "),i("type-link",{attrs:{type:"Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE"}},[e._v("Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE")]),e._v(".")],1),e._v(" "),i("h3",{attrs:{id:"eventing"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#eventing","aria-hidden":"true"}},[e._v("#")]),e._v(" Eventing")]),e._v(" "),i("p",[e._v("Unlike other views, you cannot use the "),i("code",[e._v("addEventListener")]),e._v(" method to bind callbacks to events for a\nListItem.")]),e._v(" "),i("p",[e._v("Use list view's "),i("type-link",{attrs:{type:"Titanium.UI.ListView.itemclick"}},[e._v("itemclick")]),e._v(" event to monitor click events on\nitems in the list view. Do not rely on the "),i("code",[e._v("source")]),e._v(" property to determine which item fired the\nevent.  Either use the "),i("code",[e._v("sectionIndex")]),e._v(" and "),i("code",[e._v("itemIndex")]),e._v(", or the "),i("code",[e._v("itemId")]),e._v(" to determine the list item\nthat generated the event and use the "),i("code",[e._v("bindId")]),e._v(' to check which child control fired the event.\nSee "Default List Item" under "Examples" section for an example of using the '),i("code",[e._v("itemclick")]),e._v(" event.")],1),e._v(" "),i("p",[e._v("To monitor events that bubble to the "),i("code",[e._v("ListItem")]),e._v(" or to monitor events of the view subcomponents,\nbind them to the item by using the "),i("code",[e._v("events")]),e._v(' dictionary of the item template or the child view\ntemplates respectively. Add the bindings as key-value pairs, where the key is the event name\nand the value is the callback (or array of callbacks for multiple bindings). See "List Items\nwith an Item Template" under "Examples" section for an example of binding a '),i("code",[e._v("click")]),e._v(" event to an\nitem using an item template.")]),e._v(" "),i("h2",{attrs:{id:"examples"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),i("h3",{attrs:{id:"default-list-items"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#default-list-items","aria-hidden":"true"}},[e._v("#")]),e._v(" Default List Items")]),e._v(" "),i("p",[e._v("Creates a list without using an item template. Monitors the "),i("code",[e._v("itemclick")]),e._v(" event to check and\nuncheck tasks.")]),e._v(" "),i("pre",[i("code",[e._v("var win = Ti.UI.createWindow({backgroundColor: 'white'});\nvar listView = Ti.UI.createListView();\n\nvar tasks = [\n    {id: 'trash', name: 'Take Out the Trash', icon: 'trash.png'},\n    {id: 'dishes', name: 'Do the Dishes', icon: 'dishes.png'},\n    {id: 'doggie', name: 'Walk the Dog', icon: 'doggie.png'}\n];\n\nvar data = [];\nfor (var i = 0; i < tasks.length; i++) {\n    data.push({ \n        properties: {\n            itemId: tasks[i].id,\n            title: tasks[i].name,\n            image: tasks[i].icon,\n            accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,\n            color: 'black'\n        }\n    });\n}\n\nvar section = Ti.UI.createListSection();\nsection.setItems(data);\nlistView.sections = [section];\nlistView.addEventListener('itemclick', function(e) {\n    var item = section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.properties.color = 'red';\n    } else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.properties.color = 'black';\n    }\n    section.updateItemAt(e.itemIndex, item);\n});\nwin.add(listView);\nwin.open();\n")])]),e._v(" "),i("h3",{attrs:{id:"default-list-items-alloy-version"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#default-list-items-alloy-version","aria-hidden":"true"}},[e._v("#")]),e._v(" Default List Items (Alloy version)")]),e._v(" "),i("p",[e._v("Alloy version of previous example. For additional Alloy examples of using "),i("code",[e._v("ListView")]),e._v(", see "),i("type-link",{attrs:{type:"Titanium.UI.ListView"}},[e._v("Titanium.UI.ListView")]),e._v(".")],1),e._v(" "),i("p",[e._v("index.xml")]),e._v(" "),i("pre",[i("code",[e._v('\x3c!-- views/index.xml --\x3e\n<Alloy>\n    <Window class="container" title="Some things">\n        <ListView id="listView">\n            <ListSection id="section">\n                <ListItem image="images/trash.jpg" title="Take Out the Trash"/>\n                <ListItem image="images/dishes.png" title="Do the Dishes"/>\n                <ListItem image="images/doge.png" title="Walk the Dog"/>\n            </ListSection>\n        </ListView>\n    </Window>\n</Alloy>\n')])]),e._v(" "),i("p",[e._v("index.js")]),e._v(" "),i("pre",[i("code",[e._v("\x3c!-- controllers/index.js --\x3e\n$.listView.addEventListener('itemclick', function(e) {\n    var item = $.section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.properties.color = 'red';\n    } else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.properties.color = 'black';\n    }\n    $.section.updateItemAt(e.itemIndex, item);\n});\n")])]),e._v(" "),i("h3",{attrs:{id:"list-items-with-an-item-template"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#list-items-with-an-item-template","aria-hidden":"true"}},[e._v("#")]),e._v(" List Items with an Item Template")]),e._v(" "),i("p",[e._v("Previous example modified to use an item template.  The template defines a small icon on the\nfar left, a title label to the right of the icon and a subtitle below the title label in\nsmaller text.")]),e._v(" "),i("p",[e._v("Monitors the "),i("code",[e._v("click")]),e._v(" event of the item rather than the "),i("code",[e._v("itemclick")]),e._v(" event of the list view.")]),e._v(" "),i("pre",[i("code",[e._v("var win = Ti.UI.createWindow({backgroundColor: 'white'});\n\nvar plainTemplate = {\n    childTemplates: [\n        {                            // Image justified left\n            type: 'Ti.UI.ImageView', // Use an image view for the image\n            bindId: 'pic',           // Maps to a custom pic property of the item data\n            properties: {            // Sets the image view properties\n                width: '50dp', height: '50dp', left: 0\n            }\n        },\n        {                            // Title\n            type: 'Ti.UI.Label',     // Use a label for the title\n            bindId: 'title',         // Maps to a custom title property of the item data\n            properties: {            // Sets the label properties\n                color: 'black',\n                font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },\n                left: '60dp', top: 0,\n            },\n        },\n        {                            // Subtitle\n            type: 'Ti.UI.Label',     // Use a label for the subtitle\n            bindId: 'subtitle',      // Maps to a custom subtitle property of the item data\n            properties: {            // Sets the label properties\n                color: 'gray',\n                font: { fontFamily:'Arial', fontSize: '14dp' },\n                left: '60dp', top: '25dp',\n            }\n        }\n    ],\n    // Binds a callback to the click event, which catches events bubbled by the view subcomponents.\n    events: {click: toggleCheck }\n};\n\n// The following JSON API calls copy the plainTemplate object minus functions.\n// This method of copying an object is simple but not quick.\n// If performance is a factor, create your own method to copy an object.\n\nvar redTemplate = JSON.parse(JSON.stringify(plainTemplate));\n// Change the text color to red\nredTemplate.childTemplates[1].properties.color = 'red';\nredTemplate.childTemplates[2].properties.color = 'red';\n// Rebind the click event callback\nredTemplate.events.click = toggleCheck;\n\nvar listView = Ti.UI.createListView({\n    // Maps plainTemplate to 'uncheck' and redTemplate to 'check' \n    templates: { 'uncheck': plainTemplate, 'check': redTemplate },\n    // Use 'uncheck', that is, the plainTemplate created earlier for all items\n    // Can be overridden by the item's template property\n    defaultItemTemplate: 'uncheck'\n});\n\nvar tasks = [\n    {id: 'trash', name: 'Take Out the Trash', person: 'Yakko', icon: 'trash.png'},\n    {id: 'dishes', name: 'Do the Dishes', person: 'Wakko', icon: 'dishes.png'},\n    {id: 'doggie', name: 'Walk the Dog', person: 'Dot', icon: 'doggie.png'}\n];\n\nvar data = [];\nfor (var i = 0; i < tasks.length; i++) {\n    data.push({\n        // Maps to the title component in the template\n        // Sets the text property of the Label component\n        title : { text: tasks[i].name },\n        // Maps to the subtitle component in the template\n        // Sets the text property of the Label component\n        subtitle : { text : tasks[i].person },\n        // Maps to the pic component in the template\n        // Sets the image property of the ImageView component\n        pic : { image : tasks[i].icon },\n        // Sets the regular list data properties\n        properties : {\n            itemId: tasks[i].id,\n            accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,\n        }\n    });\n}\n\nvar section = Ti.UI.createListSection();\nsection.setItems(data);\nlistView.sections = [section];\n\n// Modified version of the `itemclick` event listener\n// Changes the item template rather than the list item's color property\nfunction toggleCheck(e) {\n    var item = section.getItemAt(e.itemIndex);\n    if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n        item.template = 'check';\n    } else {\n        item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n        item.template = 'uncheck';\n    }\n    section.updateItemAt(e.itemIndex, item);\n} \n\nwin.add(listView);\nwin.open();\n")])]),e._v(" "),i("ApiDocs")],1)},[],!1,null,null,null);a.options.__file="listitem.md";t.default=a.exports}}]);